// Generated by dart2js, the Dart to JavaScript compiler version: 1.0.0.10_r30798.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i0 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self, this._receiver);
  }
}];

$$.BoundClosure$1 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$i1 = [D, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$0 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self);
  }
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$1 = [H, {"": "Closure;call$1,$name", $is_args1: true}];

$$.Closure$0 = [H, {"": "Closure;call$0,$name"}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$20 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.Closure$4 = [W, {"": "Closure;call$4,$name"}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto, interceptor;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
  }
  interceptor = H.lookupAndCacheInterceptor(object);
  if (interceptor == null)
    return C.UnknownJavaScriptObject_methods;
  return interceptor;
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  "%": "Clipboard|DOMImplementation|MediaError|MediaKeyError|Navigator|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|SVGMatrix|SVGPoint"
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("add"));
    receiver.push(value);
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
      this.add$1(receiver, t1.get$current());
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    var t1, list, i, t2;
    t1 = receiver.length;
    list = P.List_List(t1, null);
    for (i = 0; i < receiver.length; ++i) {
      t2 = H.S(receiver[i]);
      if (i >= t1)
        throw H.ioore(list, i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    if (end < start || end > receiver.length)
      throw H.wrapException(P.RangeError$range(end, start, receiver.length));
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  toList$1$growable: function(receiver, growable) {
    return P.List_List$from(receiver, growable, H.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw H.wrapException(new P.ArgumentError(newLength));
    if (newLength < 0)
      throw H.wrapException(P.RangeError$value(newLength));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $isList: true,
  $isEfficientLength: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else
      return this._slowTdiv$1(receiver, other);
  },
  _slowTdiv$1: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver > other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;", $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    endIndex = index + pattern.length;
    if (endIndex > receiver.length)
      return false;
    return pattern === receiver.substring(index, endIndex);
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
      H.throwExpression(P.ArgumentError$(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
      H.throwExpression(P.ArgumentError$(endIndex));
    if (typeof startIndex !== "number")
      throw startIndex.$lt();
    if (startIndex < 0)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        H.throwExpression(P.RangeError$value(startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        H.throwExpression(P.RangeError$value(endIndex1));
      if (endIndex1 >= endIndex)
        H.throwExpression(P.RangeError$value(endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  indexOf$2: function(receiver, pattern, start) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    return receiver.indexOf(pattern, start);
  },
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  lastIndexOf$2: function(receiver, pattern, start) {
    var t1, t2;
    start = receiver.length;
    t1 = pattern.length;
    if (typeof start !== "number")
      throw start.$add();
    t2 = receiver.length;
    if (start + t1 > t2)
      start = t2 - t1;
    return receiver.lastIndexOf(pattern, start);
  },
  lastIndexOf$1: function($receiver, pattern) {
    return this.lastIndexOf$2($receiver, pattern, null);
  },
  contains$2: function(receiver, other, startIndex) {
    if (startIndex < 0 || startIndex > receiver.length)
      throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
    return H.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  static: {
JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}

}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  if (!!entry.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!entry.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  }
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  }
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  }
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$__isolate_helper$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$__isolate_helper$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1.__isolate_helper$_controller;
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t2);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Stream;_id<,__isolate_helper$_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this.__isolate_helper$_controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  close$0: function(_) {
    var t1 = this.__isolate_helper$_controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this._id);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this.__isolate_helper$_controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    J.forEach$1$ax(map.get$values(map), this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = copy.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(copy, i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, t2, i, t3;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  }
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  }
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives__throwFormatException: function(string) {
  throw H.wrapException(P.FormatException$(string));
},

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1;
  handleError = H.Primitives__throwFormatException$closure;
  if (typeof source !== "string")
    H.throwExpression(new P.ArgumentError(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (match != null) {
    t1 = match.length;
    if (2 >= t1)
      throw H.ioore(match, 2);
    if (match[2] != null)
      return parseInt(source, 16);
    if (3 >= t1)
      throw H.ioore(match, 3);
    if (match[3] != null)
      return parseInt(source, 10);
    return handleError.call$1(source);
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, 10);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled;
  $name = C.JS_CONST_86y(J.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
    $name = C.JSString_methods.substring$1($name, 1);
  return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  a.$builtinTypeInfo = [J.JSInt];
  for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(new P.ArgumentError(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i < 0)
      throw H.wrapException(new P.ArgumentError(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

Primitives_getYear: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
},

Primitives_getMonth: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
},

Primitives_getDay: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
},

Primitives_getHours: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
},

Primitives_getMinutes: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
},

Primitives_getSeconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
},

Primitives_getMilliseconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3))
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4))
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

stringTypeCast: function(value) {
  if (typeof value === "string" || value == null)
    return value;
  throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), "String"));
},

propertyTypeCastError: function(value, property) {
  var t1 = J.getInterceptor$asx(property);
  throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
},

interceptedTypeCast: function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && J.getInterceptor(value)[property];
  else
    t1 = true;
  if (t1)
    return value;
  H.propertyTypeCastError(value, property);
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

getRuntimeTypeAsString: function(runtimeType, onTypeVariable) {
  return runtimeType[0].builtin$cls + H.joinArguments(runtimeType, 1, onTypeVariable);
},

runtimeTypeToString: function(type, onTypeVariable) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return H.getRuntimeTypeAsString(type, onTypeVariable);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex, onTypeVariable) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument, onTypeVariable);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

toStringForNativeObject: function(obj) {
  var t1 = $.getTagFunction;
  return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupAndCacheInterceptor: function(obj) {
  var tag, record, interceptor, interceptorClass, mark, t1;
  tag = $.getTagFunction.call$1(obj);
  record = $.dispatchRecordsForInstanceTags[tag];
  if (record != null) {
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  interceptor = $.interceptorsForUncacheableTags[tag];
  if (interceptor != null)
    return interceptor;
  interceptorClass = init.interceptorsByTag[tag];
  if (interceptorClass == null) {
    tag = $.alternateTagFunction.call$2(obj, tag);
    if (tag != null) {
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
    }
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  mark = tag[0];
  if (mark === "!") {
    record = H.makeLeafDispatchRecord(interceptor);
    $.dispatchRecordsForInstanceTags[tag] = record;
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  if (mark === "~") {
    $.interceptorsForUncacheableTags[tag] = interceptor;
    return interceptor;
  }
  if (mark === "-") {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  }
  if (mark === "+")
    return H.patchInteriorProto(obj, interceptor);
  if (mark === "*")
    throw H.wrapException(P.UnimplementedError$(tag));
  if (init.leafTags[tag] === true) {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  } else
    return H.patchInteriorProto(obj, interceptor);
},

patchInteriorProto: function(obj, interceptor) {
  var proto, record;
  proto = Object.getPrototypeOf(obj);
  record = J.makeDispatchRecord(interceptor, proto, null, null);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return interceptor;
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  if (true === $.initNativeDispatchFlag)
    return;
  $.initNativeDispatchFlag = true;
  H.initNativeDispatchContinue();
},

initNativeDispatchContinue: function() {
  var map, tags, i, tag, proto, record, interceptorClass;
  $.dispatchRecordsForInstanceTags = Object.create(null);
  $.interceptorsForUncacheableTags = Object.create(null);
  H.initHooks();
  map = init.interceptorsByTag;
  tags = Object.getOwnPropertyNames(map);
  if (typeof window != "undefined") {
    window;
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      proto = $.prototypeForTagFunction.call$1(tag);
      if (proto != null) {
        record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
        if (record != null)
          Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      }
    }
  }
  for (i = 0; i < tags.length; ++i) {
    tag = tags[i];
    if (/^[A-Za-z_]/.test(tag)) {
      interceptorClass = map[tag];
      map["!" + tag] = interceptorClass;
      map["~" + tag] = interceptorClass;
      map["-" + tag] = interceptorClass;
      map["+" + tag] = interceptorClass;
      map["*" + tag] = interceptorClass;
    }
  }
},

initHooks: function() {
  var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
  hooks = C.JS_CONST_TtD();
  hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_rD3, H.applyHooksTransformer(C.JS_CONST_6qb, H.applyHooksTransformer(C.JS_CONST_Cbr(C.JS_CONST_86y), hooks))))));
  if (typeof dartNativeDispatchHooksTransformer != "undefined") {
    transformers = dartNativeDispatchHooksTransformer;
    if (typeof transformers == "function")
      transformers = [transformers];
    if (transformers.constructor == Array)
      for (i = 0; i < transformers.length; ++i) {
        transformer = transformers[i];
        if (typeof transformer == "function")
          hooks = transformer(hooks) || hooks;
      }
  }
  getTag = hooks.getTag;
  getUnknownTag = hooks.getUnknownTag;
  prototypeForTag = hooks.prototypeForTag;
  $.getTagFunction = new H.initHooks_closure(getTag);
  $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
  $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
},

applyHooksTransformer: function(transformer, hooks) {
  return transformer(hooks) || hooks;
},

stringContainsUnchecked: function(receiver, other, startIndex) {
  return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  }
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
  },
  $isBoundClosure: true
},

CastErrorImplementation: {"": "Error;message",
  toString$0: function(_) {
    return this.message;
  },
  $isError: true,
  static: {
CastErrorImplementation$: function(actualType, expectedType) {
  return new H.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + H.S(expectedType));
}}

},

initHooks_closure: {"": "Closure;getTag_0",
  call$1: function(o) {
    return this.getTag_0(o);
  },
  $is_args1: true
},

initHooks_closure0: {"": "Closure;getUnknownTag_1",
  call$2: function(o, tag) {
    return this.getUnknownTag_1(o, tag);
  },
  $is_args2: true
},

initHooks_closure1: {"": "Closure;prototypeForTag_2",
  call$1: function(tag) {
    return this.prototypeForTag_2(tag);
  },
  $is_args1: true
}}],
["crowdy", "app.dart", , D, {
main: function() {
  var messageList, t1, t2;
  $.app = D.Application$("#app_container");
  messageList = document.querySelector("div#bottom-panes div#messages ul");
  N.Logger_Logger("").set$level(C.Level_ALL_0);
  N.Logger_Logger("").get$onRecord().listen$1(new D.main_closure(messageList));
  t1 = document.querySelector("#translationExample");
  t1.toString;
  t1 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_click._eventType, false);
  H.setRuntimeTypeInfo(t1, [null]);
  t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(D.translationExample$closure), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t2._tryResume$0();
},

translationExample: function(e) {
  var t1 = $.operators;
  t1.forEach$1(t1, new D.translationExample_closure());
},

getMouseCoordinatesRelativeToCanvas: function(e) {
  var t1, t2, t3, t4;
  t1 = J.getInterceptor$x(e);
  t2 = t1.get$client(e);
  t2 = t2.get$x(t2);
  t3 = J.getScreenCtm$0$x($.canvas).e;
  if (typeof t2 !== "number")
    throw t2.$sub();
  if (typeof t3 !== "number")
    throw H.iae(t3);
  t1 = t1.get$client(e);
  t1 = t1.get$y(t1);
  t4 = J.getScreenCtm$0$x($.canvas).f;
  if (typeof t1 !== "number")
    throw t1.$sub();
  if (typeof t4 !== "number")
    throw H.iae(t4);
  return H.fillLiteralMap(["x", t2 - t3, "y", t1 - t4], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
},

getRelativeMouseCoordinates: function(e) {
  var t1 = J.getInterceptor$x(e);
  return H.fillLiteralMap(["x", t1.get$offset(e).x, "y", t1.get$offset(e).y], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
},

getMouseCoordinatesProportinalToCanvas: function(e) {
  var t1, t2, t3, t4, t5;
  t1 = J.getInterceptor$x(e);
  t2 = t1.get$client(e);
  t2 = t2.get$x(t2);
  t3 = $.canvas;
  t4 = J.get$currentTranslate$x(t3);
  t5 = t4.x;
  if (typeof t2 !== "number")
    throw t2.$sub();
  if (typeof t5 !== "number")
    throw H.iae(t5);
  t3 = t3.currentScale;
  if (typeof t3 !== "number")
    throw H.iae(t3);
  t1 = t1.get$client(e);
  t1 = t1.get$y(t1);
  t4 = t4.y;
  if (typeof t1 !== "number")
    throw t1.$sub();
  if (typeof t4 !== "number")
    throw H.iae(t4);
  return H.fillLiteralMap(["x", (t2 - t5) / t3, "y", (t1 - t4) / t3], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
},

_editableKeyPressed: function(e, editable) {
  var t1, target;
  t1 = J.getInterceptor$x(e);
  target = t1.get$target(e);
  if (t1.get$keyCode(e) === 13 || J.get$text$x(target).length > 32)
    e.preventDefault();
},

_tabbableTextAreaKeyPressed: function(e) {
  var textArea, currentValue, start, end;
  if (J.get$keyCode$x(e) === 9) {
    e.preventDefault();
    textArea = H.interceptedTypeCast(W._convertNativeToDart_EventTarget(e.target), "$isTextAreaElement");
    currentValue = textArea.value;
    start = textArea.selectionStart;
    end = textArea.selectionEnd;
    textArea.value = J.getInterceptor$s(currentValue).substring$2(currentValue, 0, start) + "\t" + C.JSString_methods.substring$1(currentValue, end);
  }
},

main_closure: {"": "Closure;messageList_0",
  call$1: function(rec) {
    var t1, t2, newMessage, t3, t4;
    t1 = rec.get$level().name + ": " + H.S(rec.get$time()) + ": ";
    t2 = rec.message;
    P.print(t1 + t2);
    newMessage = document.createElement("li", null);
    newMessage.textContent = t2;
    t1 = this.messageList_0;
    t3 = J.getInterceptor$x(t1);
    t4 = t3.get$children(t1);
    t4.insert$2(t4, 0, newMessage);
    t4 = document.querySelector("ul#bottom-tabs li a span#count");
    t1 = t3.get$children(t1);
    t4.textContent = "" + t1.get$length(t1);
    if (rec.loggerName === "OperatorDetails") {
      J.set$display$x($.get$modalAlert().style, "block");
      $.get$modalAlert().querySelector("span.message").textContent = t2;
    }
  },
  $is_args1: true
},

translationExample_closure: {"": "Closure;",
  call$2: function(id, operator) {
    var t1 = operator.get$ui();
    return t1.remove$0(t1);
  },
  $is_args2: true
},

Application: {"": "Object;log",
  _modalClosed$1: function(e) {
    var t1 = J.get$children$x($.get$modalBody());
    t1.clear$0(t1);
    J.set$display$x($.get$modalAlert().style, "none");
    J.set$display$x($.get$modal().style, "none");
    $.canvas.dispatchEvent(W.CustomEvent_CustomEvent("operator_output_refresh", true, true, $.currentOperatorId));
  },
  get$_modalClosed: function() {
    return new H.BoundClosure$1(this, D.Application.prototype._modalClosed$1, null, "_modalClosed$1");
  },
  deselect$1: function(e) {
    var t1, t2;
    t1 = J.get$target$x(e);
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isSvgSvgElement && $.selectedOperator != null) {
      $.selectedOperator.group.setAttribute("class", "");
      $.selectedOperator = null;
    }
  },
  get$deselect: function() {
    return new H.BoundClosure$1(this, D.Application.prototype.deselect$1, null, "deselect$1");
  },
  drawLine$1: function(e) {
    var t1, fromId, toId, t2;
    t1 = J.getInterceptor$x(e);
    fromId = J.get$attributes$x(J.$index$asx(t1.get$detail(e), 0).get$group())._element.getAttribute("id");
    toId = J.get$attributes$x(J.$index$asx(t1.get$detail(e), 1).get$group())._element.getAttribute("id");
    t2 = $.operators;
    if (t2.$index(t2, fromId).canConnectTo$1(toId)) {
      t2 = $.operators;
      t2 = t2.$index(t2, toId).canConnectFrom$1(fromId);
    } else
      t2 = false;
    if (t2) {
      t2 = $.operators;
      t2.$index(t2, fromId).connectTo$1(toId);
      t2 = $.operators;
      t2.$index(t2, toId).connectFrom$1(fromId);
      D.FlowLineUI$(J.$index$asx(t1.get$detail(e), 0), J.$index$asx(t1.get$detail(e), 1));
    }
  },
  get$drawLine: function() {
    return new H.BoundClosure$1(this, D.Application.prototype.drawLine$1, null, "drawLine$1");
  },
  _onDragStart$1: function(e) {
    var t1, t2;
    t1 = J.getInterceptor$x(e);
    $._dragSource = H.interceptedTypeCast(t1.get$target(e), "$isLIElement");
    t2 = $._dragSource;
    t2.toString;
    t2 = new W._ElementCssClassSet(t2);
    t2.add$1(t2, "moving");
    t1.get$dataTransfer(e).effectAllowed = "move";
    e.dataTransfer.setData("text/plain", "God damn Firefox!");
  },
  get$_onDragStart: function() {
    return new H.BoundClosure$1(this, D.Application.prototype._onDragStart$1, null, "_onDragStart$1");
  },
  _onDragEnd$1: function(e) {
    var t1 = $._dragSource;
    t1.toString;
    t1 = new W._ElementCssClassSet(t1);
    t1.remove$1(t1, "moving");
  },
  get$_onDragEnd: function() {
    return new H.BoundClosure$1(this, D.Application.prototype._onDragEnd$1, null, "_onDragEnd$1");
  },
  _onDragOver$1: function(e) {
    J.preventDefault$0$x(e);
  },
  get$_onDragOver: function() {
    return new H.BoundClosure$1(this, D.Application.prototype._onDragOver$1, null, "_onDragOver$1");
  },
  _onDrop$1: function(e) {
    var operatorId, mouseCoordinates, t1, t2;
    J.preventDefault$0$x(e);
    if (J.$eq(W._convertNativeToDart_EventTarget(e.target), $.canvas)) {
      operatorId = "operator_" + $.opNumber;
      mouseCoordinates = D.getRelativeMouseCoordinates(e);
      t1 = $.operators;
      t2 = $._dragSource;
      t2.toString;
      t2 = new W._DataAttributeMap(new W._ElementAttributeMap(t2));
      t1.$indexSet(t1, operatorId, this.addOperator$4(operatorId, t2._attributes._element.getAttribute("data-" + t2._toHyphenedName$1("unit-type")), mouseCoordinates.$index(mouseCoordinates, "x"), mouseCoordinates.$index(mouseCoordinates, "y")));
      t2 = $.operators;
      J.initialize$0$x(t2.$index(t2, operatorId));
      $.opNumber = $.opNumber + 1;
    }
  },
  get$_onDrop: function() {
    return new H.BoundClosure$1(this, D.Application.prototype._onDrop$1, null, "_onDrop$1");
  },
  addOperator$4: function(id, type, x, y) {
    var newOperator;
    switch (type) {
      case "enrich":
        newOperator = D.EnrichOperator$(id, type, x, y);
        break;
      case "source.file":
        newOperator = D.SourceFileOperator$(id, type, x, y);
        break;
      case "source.human":
        newOperator = D.SourceHumanOperator$(id, type, x, y);
        break;
      case "source.manual":
        newOperator = D.SourceManualOperator$(id, type, x, y);
        break;
      case "source.rss":
        newOperator = D.SourceRSSOperator$(id, type, x, y);
        break;
      case "sink.file":
        newOperator = D.SinkFileOperator$(id, type, x, y);
        break;
      case "sink.email":
        newOperator = D.SinkEmailOperator$(id, type, x, y);
        break;
      case "processing.human":
        newOperator = D.HumanProcessingOperator$(id, type, x, y);
        break;
      case "selection":
        newOperator = D.SelectionOperator$(id, type, x, y);
        break;
      case "sort":
        newOperator = D.SortOperator$(id, type, x, y);
        break;
      case "split":
        newOperator = D.SplitOperator$(id, type, x, y);
        break;
      case "union":
        newOperator = D.UnionOperator$(id, type, x, y);
        break;
      default:
        newOperator = D.Operator$(id, type, x, y);
        break;
    }
    return newOperator;
  },
  Application$1: function(canvas_id) {
    var temp, t1, t2, t3, units;
    $.canvas = document.querySelector(canvas_id);
    temp = document.createElementNS("http://www.w3.org/2000/svg", "line");
    temp.toString;
    new W._ElementAttributeMap(temp)._element.setAttribute("stroke", "#ddd");
    new W._ElementAttributeMap(temp)._element.setAttribute("strokeLength", "1");
    $.tempLine = temp;
    $.canvas.appendChild($.tempLine);
    $.operators = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, D.Operator);
    t1 = $.canvas;
    t1.toString;
    t2 = C.EventStreamProvider_click._eventType;
    t1 = new W._ElementEventStreamImpl(t1, t2, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t3 = this.get$deselect();
    t3 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t3), t1._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = J.get$on$x($.canvas);
    t3 = t3.$index(t3, "stream_draw_line");
    t1 = this.get$drawLine();
    t1 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t1), t3._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = $.canvas;
    t1.toString;
    t1 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_dragover._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t3 = this.get$_onDragOver();
    t3 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t3), t1._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = $.canvas;
    t3.toString;
    t3 = new W._ElementEventStreamImpl(t3, C.EventStreamProvider_drop._eventType, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t1 = this.get$_onDrop();
    t1 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t1), t3._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t1._tryResume$0();
    units = W._FrozenElementList$_wrap(document.querySelectorAll("ul.units li"), null);
    t1 = new W._ElementListEventStreamImpl(units, false, C.EventStreamProvider_dragstart._eventType);
    H.setRuntimeTypeInfo(t1, [null]);
    t1.listen$1(this.get$_onDragStart());
    t1 = new W._ElementListEventStreamImpl(units, false, C.EventStreamProvider_dragend._eventType);
    H.setRuntimeTypeInfo(t1, [null]);
    t1.listen$1(this.get$_onDragEnd());
    t1 = $.get$closeButton();
    t1.toString;
    t1 = new W._ElementEventStreamImpl(t1, t2, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t3 = this.get$_modalClosed();
    t3 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t3), t1._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = $.get$modalAlert().querySelector(".close");
    t3.toString;
    t2 = new W._ElementEventStreamImpl(t3, t2, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new D.Application_closure()), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
  },
  static: {
Application$: function(canvas_id) {
  var t1 = new D.Application(N.Logger_Logger("Application"));
  t1.Application$1(canvas_id);
  return t1;
}}

},

Application_closure: {"": "Closure;",
  call$1: function(e) {
    J.set$display$x($.get$modalAlert().style, "none");
    return "none";
  },
  $is_args1: true
},

Operator: {"": "Object;log,id,type',ui<,details<,next,prev",
  initialize$0: function(_) {
    var t1, t2;
    t1 = this.ui;
    $.canvas.appendChild(t1.group);
    t1 = this.ui.group;
    t1.toString;
    t1 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_dblclick._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = this.get$_onDoubleClick();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = this.details;
    t2.initialize$0(t2);
    t2 = J.get$on$x($.canvas);
    t2 = t2.$index(t2, "operator_output_refresh");
    t1 = this.get$_refresh();
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
  },
  canConnectTo$1: function(nextOperatorId) {
    var t1 = this.next.containsKey$1(nextOperatorId);
    if (t1)
      this.log.warning$1("You already have a flow line between those units.");
    return !t1;
  },
  connectTo$1: function(nextOperatorId) {
    var t1 = this.next;
    t1.$indexSet(t1, nextOperatorId, true);
  },
  canConnectFrom$1: function(previousOperatorId) {
    var canConnect = this.prev._collection$_length === 0;
    if (!canConnect)
      this.log.warning$1("You can connect only one flow to an operator unless it's type is union.");
    return canConnect;
  },
  connectFrom$1: function(previousOperatorId) {
    var t1 = this.prev;
    t1.$indexSet(t1, previousOperatorId, true);
    this.updateDownFlow$1(previousOperatorId);
  },
  removeNext$1: function(nextOperatorId) {
    var t1 = this.next;
    t1.remove$1(t1, nextOperatorId);
  },
  removePrevious$1: function(previousOperatorId) {
    var t1 = this.prev;
    t1.remove$1(t1, previousOperatorId);
    this.clearDownFlow$0();
  },
  _onDoubleClick$1: function(e) {
    var t1;
    $.currentOperatorId = this.id;
    t1 = J.get$children$x($.get$modalBody());
    t1.add$1(t1, this.details.view);
    t1 = J.get$classes$x($.get$modal());
    t1.add$1(t1, "in");
    J.set$display$x($.get$modal().style, "block");
  },
  get$_onDoubleClick: function() {
    return new H.BoundClosure$1(this, D.Operator.prototype._onDoubleClick$1, null, "_onDoubleClick$1");
  },
  _refresh$1: function(e) {
    var prevId = H.stringTypeCast(J.get$detail$x(e));
    if (this.prev.containsKey$1(prevId))
      this.updateDownFlow$1(prevId);
  },
  get$_refresh: function() {
    return new H.BoundClosure$1(this, D.Operator.prototype._refresh$1, null, "_refresh$1");
  },
  updateDownFlow$1: function(prevId) {
    var t1, t2;
    t1 = this.details;
    t2 = $.operators;
    if (t1.refresh$1(t2.$index(t2, prevId).get$details().output) && this.next._collection$_length > 0) {
      t1 = this.next;
      t1.forEach$1(t1, new D.Operator_updateDownFlow_closure(prevId));
    }
  },
  clearDownFlow$0: function() {
    var t1 = this.details;
    t1.clear$0(t1);
    t1 = this.next;
    t1.forEach$1(t1, new D.Operator_clearDownFlow_closure());
  },
  Operator$4: function(id, type, mouseX, mouseY) {
    this.next = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, J.JSBool);
    this.prev = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, J.JSBool);
  },
  static: {
Operator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.Operator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

Operator_updateDownFlow_closure: {"": "Closure;prevId_0",
  call$2: function(nextId, connected) {
    var t1 = $.operators;
    return t1.$index(t1, nextId).updateDownFlow$1(this.prevId_0);
  },
  $is_args2: true
},

Operator_clearDownFlow_closure: {"": "Closure;",
  call$2: function(nextId, connected) {
    var t1 = $.operators;
    return t1.$index(t1, nextId).clearDownFlow$0();
  },
  $is_args2: true
},

EnrichOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  EnrichOperator$4: function(id, type, mouseX, mouseY) {
    var t1, t2, t3, t4, t5;
    this.ui = D.EnrichOperatorUI$(this.id, mouseX, mouseY, 40, 60);
    t1 = this.id;
    t2 = this.type;
    t3 = this.prev;
    t4 = this.next;
    t5 = new D.EnrichDetailsUI(N.Logger_Logger("OperatorDetails"), t1, t2, t3, t4, null, null, null, null, null, null);
    t5.BaseDetailsUI$4(t1, t2, t3, t4);
    t4 = t5.id;
    t3 = new D.OutputSpecification(t4, null, null, null, null, null);
    t3.BaseSpecification$1(t4);
    t5.output = t3;
    t5.view.appendChild(t5.output.view);
    this.details = t5;
  },
  static: {
EnrichOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.EnrichOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.EnrichOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

SourceFileOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  SourceFileOperator$4: function(id, type, mouseX, mouseY) {
    var t1, t2, t3, t4, t5;
    this.ui = D.SourceOperatorUI$(this.id, mouseX, mouseY, 80, 60);
    t1 = this.id;
    t2 = this.type;
    t3 = this.prev;
    t4 = this.next;
    t5 = new D.SourceFileDetailsUI(N.Logger_Logger("OperatorDetails"), t1, t2, t3, t4, null, null, null, null, null, null);
    t5.BaseDetailsUI$4(t1, t2, t3, t4);
    this.details = t5;
  },
  static: {
SourceFileOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.SourceFileOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.SourceFileOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

SourceHumanOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  SourceHumanOperator$4: function(id, type, mouseX, mouseY) {
    this.ui = D.SourceOperatorUI$(this.id, mouseX, mouseY, 80, 60);
    this.details = D.SourceHumanDetailsUI$(this.id, this.type, this.prev, this.next);
  },
  static: {
SourceHumanOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.SourceHumanOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.SourceHumanOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

SourceManualOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  SourceManualOperator$4: function(id, type, mouseX, mouseY) {
    this.ui = D.SourceOperatorUI$(this.id, mouseX, mouseY, 80, 60);
    this.details = D.SourceManualDetailsUI$(this.id, this.type, this.prev, this.next);
  },
  static: {
SourceManualOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.SourceManualOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.SourceManualOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

SourceRSSOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  SourceRSSOperator$4: function(id, type, mouseX, mouseY) {
    var t1, t2, t3, t4, t5;
    this.ui = D.SourceOperatorUI$(this.id, mouseX, mouseY, 80, 60);
    t1 = this.id;
    t2 = this.type;
    t3 = this.prev;
    t4 = this.next;
    t5 = new D.SourceRSSDetailsUI(N.Logger_Logger("OperatorDetails"), t1, t2, t3, t4, null, null, null, null, null, null);
    t5.BaseDetailsUI$4(t1, t2, t3, t4);
    this.details = t5;
  },
  static: {
SourceRSSOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.SourceRSSOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.SourceRSSOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

SinkFileOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  SinkFileOperator$4: function(id, type, mouseX, mouseY) {
    var t1, t2, t3, t4, t5;
    this.ui = D.SinkOperatorUI$(this.id, mouseX, mouseY, 80, 60);
    t1 = this.id;
    t2 = this.type;
    t3 = this.prev;
    t4 = this.next;
    t5 = new D.SinkFileDetailsUI(N.Logger_Logger("OperatorDetails"), t1, t2, t3, t4, null, null, null, null, null, null);
    t5.BaseDetailsUI$4(t1, t2, t3, t4);
    this.details = t5;
  },
  static: {
SinkFileOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.SinkFileOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.SinkFileOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

SinkEmailOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  SinkEmailOperator$4: function(id, type, mouseX, mouseY) {
    var t1, t2, t3, t4, t5;
    this.ui = D.SinkOperatorUI$(this.id, mouseX, mouseY, 80, 60);
    t1 = this.id;
    t2 = this.type;
    t3 = this.prev;
    t4 = this.next;
    t5 = new D.SinkEmailDetailsUI(N.Logger_Logger("OperatorDetails"), t1, t2, t3, t4, null, null, null, null, null, null);
    t5.BaseDetailsUI$4(t1, t2, t3, t4);
    this.details = t5;
  },
  static: {
SinkEmailOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.SinkEmailOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.SinkEmailOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

HumanProcessingOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  HumanProcessingOperator$4: function(id, type, mouseX, mouseY) {
    this.ui = D.ProcessingOperatorUI$(this.id, mouseX, mouseY, 80, 60);
    this.details = D.SourceHumanDetailsUI$(this.id, this.type, this.prev, this.next);
  },
  static: {
HumanProcessingOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.HumanProcessingOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.HumanProcessingOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

SelectionOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  SelectionOperator$4: function(id, type, mouseX, mouseY) {
    this.ui = D.SelectionOperatorUI$(this.id, mouseX, mouseY, 26.666666666666668, 60);
    this.details = D.SelectionDetailsUI$(this.id, this.type, this.prev, this.next);
  },
  static: {
SelectionOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.SelectionOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.SelectionOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

SortOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  SortOperator$4: function(id, type, mouseX, mouseY) {
    this.ui = D.SortOperatorUI$(this.id, mouseX, mouseY, 40, 60);
    this.details = D.SortDetailsUI$(this.id, this.type, this.prev, this.next);
  },
  static: {
SortOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.SortOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.SortOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

SplitOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  connectTo$1: function(nextOperatorId) {
    D.Operator.prototype.connectTo$1.call(this, nextOperatorId);
    H.interceptedTypeCast(this.details.output, "$isSplitOutputSpecification").refreshOutput$0();
  },
  removeNext$1: function(nextOperatorId) {
    D.Operator.prototype.removeNext$1.call(this, nextOperatorId);
    H.interceptedTypeCast(this.details.output, "$isSplitOutputSpecification").refreshOutput$0();
  },
  SplitOperator$4: function(id, type, mouseX, mouseY) {
    this.ui = D.SplitOperatorUI$(this.id, mouseX, mouseY, 40, 60);
    this.details = D.SplitDetailsUI$(this.id, this.type, this.prev, this.next);
  },
  static: {
SplitOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.SplitOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.SplitOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

UnionOperator: {"": "Operator;log,id,type,ui,details,next,prev",
  canConnectFrom$1: function(previousOperatorId) {
    var isConsistent;
    if (this.prev._collection$_length > 0) {
      isConsistent = this.isConsistent$1(previousOperatorId);
      if (!isConsistent)
        this.log.warning$1("Flows should have a consistent specification to aggregate.");
      return isConsistent;
    } else
      return true;
  },
  updateDownFlow$1: function(prevId) {
    var t1, t2;
    if (this.isConsistent$2(prevId, 1)) {
      t1 = this.details;
      t2 = $.operators;
      if (t1.refresh$1(t2.$index(t2, prevId).get$details().output) && this.next._collection$_length > 0) {
        t1 = this.next;
        t1.forEach$1(t1, new D.UnionOperator_updateDownFlow_closure(prevId));
      }
    } else {
      this.log.warning$1("Consistency in output speficications of union operator. Clearing aggregation.");
      H.interceptedTypeCast(this.ui, "$isUnionOperatorUI").inputPort.body.dispatchEvent(W.CustomEvent_CustomEvent("stream_port_removed", true, true, null));
      if (this.next._collection$_length > 0)
        this.clearDownFlow$0();
    }
  },
  isConsistent$2: function(previousOperatorId, updating) {
    var t1, existingOutputSpec, t2, newOutputSpec;
    t1 = {};
    t1.isConsistent_0 = true;
    if (this.prev._collection$_length > 0 + updating) {
      existingOutputSpec = this.details.output.elements;
      t2 = $.operators;
      newOutputSpec = t2.$index(t2, previousOperatorId).get$details().output.elements;
      existingOutputSpec.forEach$1(existingOutputSpec, new D.UnionOperator_isConsistent_closure(t1, newOutputSpec));
      newOutputSpec.forEach$1(newOutputSpec, new D.UnionOperator_isConsistent_closure0(t1, existingOutputSpec));
    }
    return t1.isConsistent_0;
  },
  isConsistent$1: function(previousOperatorId) {
    return this.isConsistent$2(previousOperatorId, 0);
  },
  UnionOperator$4: function(id, type, mouseX, mouseY) {
    var t1, t2, t3, t4, t5;
    this.ui = D.UnionOperatorUI$(this.id, mouseX, mouseY, 40, 60);
    t1 = this.id;
    t2 = this.type;
    t3 = this.prev;
    t4 = this.next;
    t5 = new D.UnionDetailsUI(N.Logger_Logger("OperatorDetails"), t1, t2, t3, t4, null, null, null, null, null, null);
    t5.BaseDetailsUI$4(t1, t2, t3, t4);
    t4 = t5.id;
    t3 = new D.OutputSpecification(t4, null, null, null, null, null);
    t3.BaseSpecification$1(t4);
    t5.output = t3;
    t5.view.appendChild(t5.output.view);
    this.details = t5;
  },
  static: {
UnionOperator$: function(id, type, mouseX, mouseY) {
  var t1 = new D.UnionOperator(N.Logger_Logger("Operator"), id, type, null, null, null, null);
  t1.Operator$4(id, type, mouseX, mouseY);
  t1.UnionOperator$4(id, type, mouseX, mouseY);
  return t1;
}}

},

UnionOperator_updateDownFlow_closure: {"": "Closure;prevId_0",
  call$2: function(nextId, connected) {
    var t1 = $.operators;
    return t1.$index(t1, nextId).updateDownFlow$1(this.prevId_0);
  },
  $is_args2: true
},

UnionOperator_isConsistent_closure: {"": "Closure;box_0,newOutputSpec_1",
  call$2: function(id, segment) {
    var t1, isConsistent;
    t1 = this.box_0;
    isConsistent = t1.isConsistent_0 && this.newOutputSpec_1.containsKey$1(id);
    t1.isConsistent_0 = isConsistent;
    return isConsistent;
  },
  $is_args2: true
},

UnionOperator_isConsistent_closure0: {"": "Closure;box_0,existingOutputSpec_2",
  call$2: function(id, segment) {
    var t1, isConsistent;
    t1 = this.box_0;
    isConsistent = t1.isConsistent_0 && this.existingOutputSpec_2.containsKey$1(id);
    t1.isConsistent_0 = isConsistent;
    return isConsistent;
  },
  $is_args2: true
},

OutputSegmentUI: {"": "Object;removable,segment,name>,value>,deleteButton",
  getFormElement$1: function(exampleValue) {
    var buttonDiv;
    J.insertAdjacentHtml$2$x(this.segment, "beforeend", "<span>\"</span>");
    this.segment.appendChild(this.name);
    J.insertAdjacentHtml$2$x(this.segment, "beforeend", "<span>\"</span>");
    if (J.get$isNotEmpty$asx(exampleValue)) {
      this.value.textContent = "e.g. " + H.S(exampleValue);
      this.segment.appendChild(this.value);
    }
    if (this.removable) {
      buttonDiv = document.createElement("div", null);
      buttonDiv.className = "col-sm-2";
      buttonDiv.appendChild(this.deleteButton);
      this.segment.appendChild(buttonDiv);
    }
    return this.segment;
  },
  _remove$0: function() {
    J.remove$0$ax(this.segment);
  },
  OutputSegmentUI$3: function(defaultName, removable, editable) {
    var t1, t2, t3;
    if (this.removable) {
      t1 = document.createElement("button", null);
      t1.textContent = "Delete";
      t1.className = "btn btn-danger";
      t1.toString;
      t2 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_click._eventType, false);
      H.setRuntimeTypeInfo(t2, [null]);
      t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new D.OutputSegmentUI_closure(this)), t2._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t3._tryResume$0();
      this.deleteButton = t1;
    }
    this.segment = document.createElement("li", null);
    t1 = document.createElement("span", null);
    t1.textContent = defaultName.length !== 0 ? defaultName : "segment-name";
    t1.contentEditable = String(editable);
    t1.toString;
    t2 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_keypress._eventType, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new D.OutputSegmentUI_closure0(editable)), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    this.name = t1;
    this.value = document.createElement("span", null);
    this.value.className = "example";
  },
  static: {
OutputSegmentUI$: function(defaultName, removable, editable) {
  var t1 = new D.OutputSegmentUI(removable, null, null, null, null);
  t1.OutputSegmentUI$3(defaultName, removable, editable);
  return t1;
}}

},

OutputSegmentUI_closure: {"": "Closure;this_0",
  call$1: function(e) {
    J.remove$0$ax(this.this_0.segment);
    return;
  },
  $is_args1: true
},

OutputSegmentUI_closure0: {"": "Closure;editable_1",
  call$1: function(e) {
    return D._editableKeyPressed(e, this.editable_1);
  },
  $is_args1: true
},

BaseSpecification: {"": "Object;",
  initialize$0: function(_) {
    var t1, t2;
    this.view.id = this.id + "-specification";
    this.view.className = "output-specification";
    this.elementList.className = "segment-list";
    this.title = document.createElement("h4", null);
    this.title.textContent = "Output Specification ";
    this.title.className = "margin-top";
    this.view.appendChild(this.title);
    this.view.appendChild(document.createElement("hr", null));
    t1 = this.innerView;
    t2 = document.createElement("p", null);
    t2.textContent = "{";
    t1.appendChild(t2);
    this.innerView.appendChild(this.elementList);
    t2 = this.innerView;
    t1 = document.createElement("p", null);
    t1.textContent = "}";
    t2.appendChild(t1);
    this.view.appendChild(this.innerView);
  },
  addElement$6$additional$defaultName$editable$example$removable: function(identifier, additional, defaultName, editable, example, removable) {
    var newElement, t1;
    newElement = D.OutputSegmentUI$(defaultName, removable, editable);
    newElement.name.id = identifier;
    t1 = this.elements;
    t1.$indexSet(t1, identifier, newElement);
    this.elementList.appendChild(newElement.getFormElement$1(example));
  },
  addElement$2$example: function(identifier, example) {
    return this.addElement$6$additional$defaultName$editable$example$removable(identifier, null, "", true, example, false);
  },
  removeElement$1: function(identifier) {
    var t1 = this.elements;
    t1.$index(t1, identifier)._remove$0();
    t1 = this.elements;
    t1.remove$1(t1, identifier);
  },
  select$1: function(_, previousConnections) {
    var selectElement, t1, t2, segmentList;
    selectElement = document.createElement("select", null);
    selectElement.className = "output-segments form-control input-sm";
    if (previousConnections._collection$_length > 0) {
      t1 = $.operators;
      t2 = new P.LinkedHashMapKeyIterable(previousConnections);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(previousConnections, "_LinkedHashMap", 0)]);
      segmentList = t1.$index(t1, t2.get$first(t2)).get$details().output.elements;
      segmentList.forEach$1(segmentList, new D.BaseSpecification_select_closure(selectElement));
    }
    return selectElement;
  },
  BaseSpecification$1: function(id) {
    this.elements = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, D.OutputSegmentUI);
    this.view = document.createElement("div", null);
    this.innerView = document.createElement("div", null);
    this.elementList = document.createElement("ul", null);
    this.initialize$0(this);
  }
},

BaseSpecification_select_closure: {"": "Closure;selectElement_0",
  call$2: function(identifier, segment) {
    var t1 = J.getInterceptor$x(segment);
    return this.selectElement_0.appendChild(W.OptionElement_OptionElement$_(J.get$text$x(t1.get$name(segment)), J.get$id$x(t1.get$name(segment)), null, false));
  },
  $is_args2: true
},

OutputSpecification: {"": "BaseSpecification;id,elements,title,view,innerView,elementList",
  refresh$1: function(previousElements) {
    var changed, i, $arguments, t1, t2, t3;
    for (changed = false, i = 0; i < previousElements._collection$_length; ++i) {
      $arguments = H.substitute(previousElements.$as_LinkedHashMap, H.getRuntimeTypeInfo(previousElements));
      t1 = $arguments == null ? null : $arguments[0];
      t2 = new P.LinkedHashMapKeyIterable(previousElements);
      t2.$builtinTypeInfo = [t1];
      t1 = t2.elementAt$1(t2, i);
      t2 = previousElements.get$values(previousElements);
      t3 = t2._iterable;
      changed = this.updateSegment$2(t1, t2._f$1(t3.elementAt$1(t3, i))) || changed;
    }
    for (i = this.elements._collection$_length - 1; i >= 0; --i) {
      t1 = this.elements;
      t1.toString;
      $arguments = H.substitute(t1.$as_LinkedHashMap, H.getRuntimeTypeInfo(t1));
      t2 = $arguments == null ? null : $arguments[0];
      t1 = new P.LinkedHashMapKeyIterable(t1);
      t1.$builtinTypeInfo = [t2];
      t1 = t1.elementAt$1(t1, i);
      t2 = this.elements;
      t2 = t2.get$values(t2);
      t3 = t2._iterable;
      changed = this.assureSegment$3(t1, t2._f$1(t3.elementAt$1(t3, i)), previousElements) || changed;
    }
    return changed;
  },
  updateSegment$2: function(id, segment) {
    var t1, t2, newElement, t3;
    if (!this.elements.containsKey$1(id)) {
      t1 = J.getInterceptor$x(segment);
      t2 = J.get$id$x(t1.get$name(segment));
      newElement = D.OutputSegmentUI$(J.get$text$x(t1.get$name(segment)), false, false);
      newElement.name.id = t2;
      t1 = this.elements;
      t1.$indexSet(t1, t2, newElement);
      this.elementList.appendChild(newElement.getFormElement$1(""));
      return true;
    }
    t1 = this.elements;
    t1 = J.get$text$x(J.get$name$x(t1.$index(t1, id)));
    t2 = J.getInterceptor$x(segment);
    t3 = J.get$text$x(t2.get$name(segment));
    t1.toString;
    if (typeof t3 !== "string")
      H.throwExpression(new P.ArgumentError(t3));
    if (t1 == null ? t3 == null : t1 === t3)
      t1 = 0;
    else
      t1 = t1 < t3 ? -1 : 1;
    if (t1 !== 0) {
      t1 = J.get$text$x(t2.get$name(segment));
      t2 = this.elements;
      J.set$text$x(J.get$name$x(t2.$index(t2, id)), t1);
      return true;
    }
    return false;
  },
  assureSegment$3: function(id, segment, previousElements) {
    var t1, t2;
    if (!previousElements.containsKey$1(id)) {
      t1 = J.get$id$x(J.get$name$x(segment));
      t2 = this.elements;
      t2.$index(t2, t1)._remove$0();
      t2 = this.elements;
      t2.remove$1(t2, t1);
      return true;
    }
    return false;
  }
},

RuleOutputSpecification: {"": "OutputSpecification;details<",
  refresh$1: function(previousElements) {
    var updated, t1;
    updated = D.OutputSpecification.prototype.refresh$1.call(this, previousElements);
    if (updated) {
      t1 = W._FrozenElementList$_wrap(this.details.rulesDiv.querySelectorAll(".rule select.output-segments"), null);
      t1.forEach$1(t1, new D.RuleOutputSpecification_refresh_closure(this));
    }
    return updated;
  },
  _updateRuleSegments$1: function(e) {
    var t1, selectedSegment;
    t1 = J.getInterceptor$x(e);
    selectedSegment = t1.get$value(e);
    J.clear$0$ax(t1.get$children(e));
    J.addAll$1$ax(t1.get$children(e), J.get$options$x(this.select$1(this, this.details.prevConn)));
    t1.set$value(e, selectedSegment);
  }
},

RuleOutputSpecification_refresh_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._updateRuleSegments$1(e);
  },
  $is_args1: true
},

InputHumanOutputSpecification: {"": "OutputSpecification;id,elements,title,view,innerView,elementList"},

InputManualOutputSpecification: {"": "OutputSpecification;id,elements,title,view,innerView,elementList"},

SelectionOutputSpecification: {"": "RuleOutputSpecification;details,id,elements,title,view,innerView,elementList"},

SortOutputSpecification: {"": "RuleOutputSpecification;details,id,elements,title,view,innerView,elementList"},

SplitOutputSpecification: {"": "RuleOutputSpecification;details,id,elements,title,view,innerView,elementList",
  refreshOutput$0: function() {
    var t1 = W._FrozenElementList$_wrap(this.details.rulesDiv.querySelectorAll(".rule select.output-flows"), null);
    t1.forEach$1(t1, new D.SplitOutputSpecification_refreshOutput_closure(this));
  },
  _updateRuleFlows$1: function(e) {
    var t1, selectedSegment;
    t1 = J.getInterceptor$x(e);
    selectedSegment = t1.get$value(e);
    J.clear$0$ax(t1.get$children(e));
    J.addAll$1$ax(t1.get$children(e), J.get$options$x(H.interceptedTypeCast(this.details, "$isSplitDetailsUI").outputSelectElement$0()));
    t1.set$value(e, selectedSegment);
  },
  $isSplitOutputSpecification: true
},

SplitOutputSpecification_refreshOutput_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._updateRuleFlows$1(e);
  },
  $is_args1: true
},

FlowLineUI: {"": "Object;path,from,to,selected",
  select$1: function(_, e) {
    var t1, t2;
    this.selected = this.selected !== true;
    t1 = this.selected;
    t2 = this.path;
    if (t1 === true) {
      t2.parentNode.appendChild(t2);
      this.path.setAttribute("class", "selected");
    } else
      t2.setAttribute("class", "");
  },
  get$select: function(_receiver) {
    return new D.BoundClosure$i1(this, D.FlowLineUI.prototype.select$1, _receiver, "select$1");
  },
  remove$0: function(_) {
    var from, t1, to, t2;
    from = J.get$attributes$x(this.from.get$group())._element.getAttribute("id");
    t1 = this.to;
    to = J.get$attributes$x(t1.get$group())._element.getAttribute("id");
    t2 = $.operators;
    t2.$index(t2, from).removeNext$1(to);
    t2 = $.operators;
    t2.$index(t2, to).removePrevious$1(from);
    t2 = J.get$children$x($.canvas);
    t2.remove$1(t2, this.path);
    t2 = $.operators;
    t2.$index(t2, J.get$id$x(t1.get$group())).clearDownFlow$0();
  },
  _keyPressed$1: function(e) {
    if (this.selected === true && J.get$keyCode$x(e) === 8) {
      J.preventDefault$0$x(e);
      this.remove$0(this);
    }
  },
  get$_keyPressed: function() {
    return new H.BoundClosure$1(this, D.FlowLineUI.prototype._keyPressed$1, null, "_keyPressed$1");
  },
  _move$1: function(e) {
    var t1, t2, t3, t4, t5, t6, t7;
    J.get$pathSegList$x(this.path).clear();
    t1 = this.path;
    t2 = J.get$pathSegList$x(t1);
    t3 = this.from;
    t4 = t3.get$point();
    t2.appendItem(t1.createSVGPathSegMovetoAbs(t4.x, t4.y));
    t4 = this.path;
    t1 = J.get$pathSegList$x(t4);
    t3 = t3.point;
    t2 = t3.x;
    t5 = this.to;
    t6 = t5.get$point();
    t7 = t6.x;
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t7 !== "number")
      throw H.iae(t7);
    t3 = t3.y;
    t6 = t6.y;
    if (typeof t3 !== "number")
      throw t3.$add();
    if (typeof t6 !== "number")
      throw H.iae(t6);
    t1.appendItem(t4.createSVGPathSegLinetoAbs((t2 + t7) / 2, (t3 + t6) / 2));
    t6 = this.path;
    t3 = J.get$pathSegList$x(t6);
    t5 = t5.point;
    t3.appendItem(t6.createSVGPathSegLinetoAbs(t5.x, t5.y));
  },
  get$_move: function() {
    return new H.BoundClosure$1(this, D.FlowLineUI.prototype._move$1, null, "_move$1");
  },
  _remove$1: function(e) {
    this.remove$0(this);
  },
  get$_remove: function() {
    return new H.BoundClosure$1(this, D.FlowLineUI.prototype._remove$1, null, "_remove$1");
  },
  FlowLineUI$2: function(from, to) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    this.selected = false;
    this.path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    t1 = this.path;
    t2 = J.get$pathSegList$x(t1);
    t3 = this.from;
    t4 = t3.get$point();
    t2.appendItem(t1.createSVGPathSegMovetoAbs(t4.x, t4.y));
    t4 = this.path;
    t1 = J.get$pathSegList$x(t4);
    t2 = t3.point;
    t5 = t2.x;
    t6 = this.to;
    t7 = t6.get$point();
    t8 = t7.x;
    if (typeof t5 !== "number")
      throw t5.$add();
    if (typeof t8 !== "number")
      throw H.iae(t8);
    t2 = t2.y;
    t7 = t7.y;
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t7 !== "number")
      throw H.iae(t7);
    t1.appendItem(t4.createSVGPathSegLinetoAbs((t5 + t8) / 2, (t2 + t7) / 2));
    t7 = this.path;
    t2 = J.get$pathSegList$x(t7);
    t8 = t6.point;
    t2.appendItem(t7.createSVGPathSegLinetoAbs(t8.x, t8.y));
    this.path.setAttribute("from", "" + t3.get$hashCode(t3));
    this.path.setAttribute("to", "" + t6.get$hashCode(t6));
    this.path.setAttribute("stroke-width", "1.5");
    t8 = this.path;
    t8.toString;
    t8 = new W._ElementEventStreamImpl(t8, C.EventStreamProvider_mousedown._eventType, false);
    H.setRuntimeTypeInfo(t8, [null]);
    t7 = this.get$select(this);
    t7 = new W._EventStreamSubscription(0, t8._target, t8._eventType, W._wrapZone(t7), t8._useCapture);
    H.setRuntimeTypeInfo(t7, [H.getRuntimeTypeArgument(t8, "_EventStream", 0)]);
    t7._tryResume$0();
    $.canvas.appendChild(this.path);
    t7 = new W._EventStream(window, C.EventStreamProvider_keydown._eventType, false);
    H.setRuntimeTypeInfo(t7, [null]);
    t8 = this.get$_keyPressed();
    t8 = new W._EventStreamSubscription(0, t7._target, t7._eventType, W._wrapZone(t8), t7._useCapture);
    H.setRuntimeTypeInfo(t8, [H.getRuntimeTypeArgument(t7, "_EventStream", 0)]);
    t8._tryResume$0();
    t8 = J.get$on$x(t3.body);
    t8 = t8.$index(t8, "stream_port_moving");
    t7 = this.get$_move();
    t7 = new W._EventStreamSubscription(0, t8._target, t8._eventType, W._wrapZone(t7), t8._useCapture);
    H.setRuntimeTypeInfo(t7, [H.getRuntimeTypeArgument(t8, "_EventStream", 0)]);
    t7._tryResume$0();
    t7 = J.get$on$x(t6.body);
    t7 = t7.$index(t7, "stream_port_moving");
    t8 = this.get$_move();
    t8 = new W._EventStreamSubscription(0, t7._target, t7._eventType, W._wrapZone(t8), t7._useCapture);
    H.setRuntimeTypeInfo(t8, [H.getRuntimeTypeArgument(t7, "_EventStream", 0)]);
    t8._tryResume$0();
    t3 = J.get$on$x(t3.body);
    t3 = t3.$index(t3, "stream_port_removed");
    t8 = this.get$_remove();
    t8 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t8), t3._useCapture);
    H.setRuntimeTypeInfo(t8, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t8._tryResume$0();
    t6 = J.get$on$x(t6.body);
    t6 = t6.$index(t6, "stream_port_removed");
    t8 = this.get$_remove();
    t8 = new W._EventStreamSubscription(0, t6._target, t6._eventType, W._wrapZone(t8), t6._useCapture);
    H.setRuntimeTypeInfo(t8, [H.getRuntimeTypeArgument(t6, "_EventStream", 0)]);
    t8._tryResume$0();
  },
  static: {
FlowLineUI$: function(from, to) {
  var t1 = new D.FlowLineUI(null, from, to, null);
  t1.FlowLineUI$2(from, to);
  return t1;
}}

},

ElementUI: {"": "Object;id,type',label,input<",
  getFormElement$0: function() {
    var inputDiv, outerDiv;
    inputDiv = document.createElement("div", null);
    inputDiv.className = "col-sm-9";
    inputDiv.appendChild(this.input);
    outerDiv = document.createElement("div", null);
    outerDiv.className = "row";
    outerDiv.hidden = this.type === "list";
    outerDiv.appendChild(this.label);
    outerDiv.appendChild(inputDiv);
    return outerDiv;
  },
  ElementUI$5$attributes$options: function(id, type, description, attributes, options) {
    var t1, i, newOption, t2;
    t1 = document.createElement("label", null);
    t1.textContent = description;
    J.set$htmlFor$x(t1, this.id);
    t1.className = "col-sm-3 control-label";
    this.label = t1;
    t1 = this.type;
    switch (t1) {
      case "editable":
        t1 = document.createElement("div", null);
        t1.contentEditable = "true";
        this.input = t1;
        break;
      case "list":
        this.input = document.createElement("ul", null);
        break;
      case "select":
        this.input = document.createElement("select", null);
        for (options.length, i = 0; i < 5; ++i) {
          newOption = W.OptionElement_OptionElement$_(options[i], "" + i, null, false);
          this.input.appendChild(newOption);
        }
        break;
      case "textarea":
        this.input = document.createElement("textarea", null);
        t1 = this.input;
        t1.toString;
        t1 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_keydown._eventType, false);
        H.setRuntimeTypeInfo(t1, [null]);
        t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(D._tabbableTextAreaKeyPressed$closure), t1._useCapture);
        H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
        t2._tryResume$0();
        break;
      default:
        this.input = W.InputElement_InputElement(t1);
        break;
    }
    if (attributes != null)
      attributes.forEach$1(attributes, new D.ElementUI_closure(this));
    this.input.id = this.id;
    t1 = this.input;
    if (t1.className.length === 0)
      t1.className = "form-control";
  },
  static: {
ElementUI$: function(id, type, description, attributes, options) {
  var t1 = new D.ElementUI(id, type, null, null);
  t1.ElementUI$5$attributes$options(id, type, description, attributes, options);
  return t1;
}}

},

ElementUI_closure: {"": "Closure;this_0",
  call$2: function(property, value) {
    var t1 = this.this_0.input;
    t1.toString;
    new W._ElementAttributeMap(t1)._element.setAttribute(property, value);
    return value;
  },
  $is_args2: true
},

BaseDetailsUI: {"": "Object;type'",
  initialize$0: function(_) {
    this.addTitles$0();
    this.addElement$5$features("id", "text", "ID", this.base, H.fillLiteralMap(["disabled", "true", "value", this.id], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    this.addElement$5$features("type", "text", "Type", this.base, H.fillLiteralMap(["disabled", "true", "value", this.type], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    this.addElement$4("name", "text", "Name", this.base);
    this.addElement$5$features("description", "textarea", "Description", this.base, H.fillLiteralMap(["rows", "3"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
  },
  addElement$6$features$options: function(identifier, type, description, list, features, options) {
    var newElement, t1;
    newElement = D.ElementUI$(this.id + "_" + $.BaseDetailsUI_count, type, description, features, options);
    list.$indexSet(list, identifier, newElement);
    $.BaseDetailsUI_count = $.BaseDetailsUI_count + 1;
    t1 = this.base;
    if (list == null ? t1 == null : list === t1)
      this.detailsView.appendChild(newElement.getFormElement$0());
    else
      this.parametersView.appendChild(newElement.getFormElement$0());
    return newElement;
  },
  addElement$5$features: function(identifier, type, description, list, features) {
    return this.addElement$6$features$options(identifier, type, description, list, features, null);
  },
  addElement$4: function(identifier, type, description, list) {
    return this.addElement$6$features$options(identifier, type, description, list, null, null);
  },
  addElement$5$options: function(identifier, type, description, list, options) {
    return this.addElement$6$features$options(identifier, type, description, list, null, options);
  },
  addTitles$0: function() {
    var t1, t2;
    t1 = this.detailsView;
    t2 = document.createElement("h4", null);
    t2.id = "details";
    t2.textContent = "Details";
    J.insertAdjacentHtml$2$x(t2, "beforeend", "<small>for bookkeeping purposes</small>");
    t1.appendChild(t2);
    this.detailsView.appendChild(document.createElement("hr", null));
    t2 = this.parametersView;
    t1 = document.createElement("h4", null);
    t1.id = "parameters";
    t1.textContent = "Parameters";
    J.insertAdjacentHtml$2$x(t1, "beforeend", "<small>specific to this operator</small>");
    t2.appendChild(t1);
    this.parametersView.appendChild(document.createElement("hr", null));
  },
  refresh$1: function(specification) {
    return false;
  },
  clear$0: function(_) {
    var t1 = this.output;
    J.set$innerHtml$x(t1.elementList, "");
    t1 = t1.elements;
    t1.clear$0(t1);
  },
  BaseDetailsUI$4: function(id, type, prevConn, nextConn) {
    var t1, t2;
    t1 = this.id;
    t2 = new D.OutputSpecification(t1, null, null, null, null, null);
    t2.BaseSpecification$1(t1);
    this.output = t2;
    this.base = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, D.ElementUI);
    this.elements = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, D.ElementUI);
    t2 = document.createElement("div", null);
    t2.id = this.id + "-details";
    t2.className = "operator-details";
    this.detailsView = t2;
    t2 = document.createElement("div", null);
    t2.id = this.id + "-parameters";
    t2.className = "operator-parameters";
    this.parametersView = t2;
    t2 = document.createElement("div", null);
    t2.appendChild(this.detailsView);
    t2.appendChild(this.parametersView);
    this.view = t2;
  }
},

OutputDetailsUI: {"": "BaseDetailsUI;",
  refresh$1: function(specification) {
    return this.output.refresh$1(specification.elements);
  }
},

RuleDetailsUI: {"": "OutputDetailsUI;",
  initialize$0: function(_) {
    var t1, t2, t3;
    D.BaseDetailsUI.prototype.initialize$0.call(this, this);
    t1 = document.createElement("div", null);
    t1.className = "rules";
    this.rulesDiv = t1;
    this.parametersView.appendChild(this.rulesDiv);
    t1 = document.createElement("button", null);
    t1.className = "btn btn-default btn-xs";
    t1.textContent = "add new rule";
    t1.toString;
    t2 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_click._eventType, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t3 = this.get$_addRule();
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    this.addRuleButton = t1;
    this.parametersView.querySelector("#parameters").appendChild(this.addRuleButton);
  },
  clear$0: function(_) {
    var t1;
    D.BaseDetailsUI.prototype.clear$0.call(this, this);
    t1 = J.get$children$x(this.rulesDiv);
    t1.clear$0(t1);
  },
  refresh$1: function(specification) {
    var updated, t1;
    updated = D.OutputDetailsUI.prototype.refresh$1.call(this, specification);
    if (specification.elements._collection$_length === 0) {
      D.BaseDetailsUI.prototype.clear$0.call(this, this);
      t1 = J.get$children$x(this.rulesDiv);
      t1.clear$0(t1);
      return true;
    }
    return updated;
  },
  _addRule$1: function(e) {
  },
  get$_addRule: function() {
    return new H.BoundClosure$1(this, D.RuleDetailsUI.prototype._addRule$1, null, "_addRule$1");
  }
},

EnrichDetailsUI: {"": "OutputDetailsUI;log,id,type,prevConn,nextConn,output,base,elements,view,detailsView,parametersView",
  initialize$0: function(_) {
    D.BaseDetailsUI.prototype.initialize$0.call(this, this);
    this.addElement$5$features("copy", "number", "Iterations", this.elements, H.fillLiteralMap(["min", "1", "max", "5", "value", "1"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
  }
},

UnionDetailsUI: {"": "OutputDetailsUI;log,id,type,prevConn,nextConn,output,base,elements,view,detailsView,parametersView",
  initialize$0: function(_) {
    D.BaseDetailsUI.prototype.initialize$0.call(this, this);
  }
},

SourceFileDetailsUI: {"": "BaseDetailsUI;log,id,type,prevConn,nextConn,output,base,elements,view,detailsView,parametersView",
  initialize$0: function(_) {
    D.BaseDetailsUI.prototype.initialize$0.call(this, this);
    this.addElement$4("input", "file", "File", this.elements);
    this.addElement$4("delimiter", "text", "Delimiter", this.elements);
  }
},

SourceHumanDetailsUI: {"": "BaseDetailsUI;availableInputs,elementsDiv,rulesDiv,segmentList,refreshableDivs,_dragSegment,log,id,type,prevConn,nextConn,output,base,elements,view,detailsView,parametersView",
  initialize$0: function(_) {
    var instructions, question, t1, t2, t3, t4;
    D.BaseDetailsUI.prototype.initialize$0.call(this, this);
    this.addElement$5$features("segment-list", "list", "Available Segments", this.elements, H.fillLiteralMap(["class", "list-inline segments"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    instructions = this.addElement$4("instructions", "editable", "Instructions for human workers", this.elements);
    question = this.addElement$4("question", "editable", "Question", this.elements);
    this.configureHumanTasks$0();
    t1 = P.List_List(null, W.DivElement);
    H.setRuntimeTypeInfo(t1, [W.DivElement]);
    this.refreshableDivs = t1;
    t1 = instructions.input;
    t1.toString;
    t2 = C.EventStreamProvider_drop._eventType;
    t1 = new W._ElementEventStreamImpl(t1, t2, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t3 = this.get$_onSegmentDrop();
    t3 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t3), t1._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = instructions.input;
    t3.toString;
    t1 = C.EventStreamProvider_dragover._eventType;
    t3 = new W._ElementEventStreamImpl(t3, t1, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t4 = this.get$_onSegmentDragOver();
    t4 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t4), t3._useCapture);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t4._tryResume$0();
    t4 = question.input;
    t4.toString;
    t2 = new W._ElementEventStreamImpl(t4, t2, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t4 = this.get$_onSegmentDrop();
    t4 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t4), t2._useCapture);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t4._tryResume$0();
    t4 = question.input;
    t4.toString;
    t1 = new W._ElementEventStreamImpl(t4, t1, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t4 = this.get$_onSegmentDragOver();
    t4 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t4), t1._useCapture);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t4._tryResume$0();
    this.refreshableDivs.push(instructions.input);
    this.refreshableDivs.push(question.input);
  },
  refresh$1: function(specification) {
    var t1, prevSegments;
    t1 = J.get$children$x(this.segmentList);
    t1.clear$0(t1);
    prevSegments = specification.elements;
    t1 = this.refreshableDivs;
    t1.toString;
    H.IterableMixinWorkaround_forEach(t1, new D.SourceHumanDetailsUI_refresh_closure(this, prevSegments));
    if (prevSegments._collection$_length > 0) {
      prevSegments.forEach$1(prevSegments, new D.SourceHumanDetailsUI_refresh_closure0(this));
      this.segmentList.parentElement.parentElement.hidden = false;
    } else
      this.segmentList.parentElement.parentElement.hidden = true;
    return true;
  },
  refreshSegmentFromPrevious$2: function(id, segment) {
    var t1, t2, t3, t4, t5;
    t1 = this.segmentList;
    t2 = document.createElement("li", null);
    t3 = document.createElement("span", null);
    t4 = J.getInterceptor$x(segment);
    t3.textContent = J.get$text$x(t4.get$name(segment));
    t3.toString;
    new W._ElementAttributeMap(t3)._element.setAttribute("data-segment", J.get$id$x(t4.get$name(segment)));
    t3.className = "segment-name";
    t3.draggable = true;
    t4 = new W._ElementEventStreamImpl(t3, C.EventStreamProvider_drag._eventType, false);
    H.setRuntimeTypeInfo(t4, [null]);
    t5 = new W._EventStreamSubscription(0, t4._target, t4._eventType, W._wrapZone(new D.SourceHumanDetailsUI_refreshSegmentFromPrevious_closure(this, segment)), t4._useCapture);
    H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t4, "_EventStream", 0)]);
    t5._tryResume$0();
    t2.appendChild(t3);
    t1.appendChild(t2);
    t2 = this.refreshableDivs;
    t2.toString;
    H.IterableMixinWorkaround_forEach(t2, new D.SourceHumanDetailsUI_refreshSegmentFromPrevious_closure0(id, segment));
  },
  refreshSegmentFromCurrent$2: function(segments, prevSegments) {
    var t1, i, t2, t3;
    for (t1 = segments._nodeList, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      if (!prevSegments.containsKey$1(J.get$attributes$x(t1[i])._element.getAttribute("data-segment"))) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t2 = t1[i];
        t3 = t2.parentNode;
        if (t3 != null)
          t3.removeChild(t2);
      }
    }
  },
  _onSegmentDrop$1: function(e) {
    var segmentId, segmentValue, t1, t2, t3, t4, t5;
    segmentId = J.get$id$x(J.get$name$x(this._dragSegment));
    segmentValue = J.get$text$x(J.get$name$x(this._dragSegment));
    t1 = H.interceptedTypeCast(J.get$target$x(e), "$isHtmlElement");
    t2 = document.createElement("span", null);
    t2.toString;
    new W._ElementAttributeMap(t2)._element.setAttribute("data-segment", segmentId);
    t2.contentEditable = "false";
    t2.className = "segment-tag";
    t3 = document.createElement("span", null);
    t3.textContent = segmentValue;
    t3.className = "segment-name";
    t2.appendChild(t3);
    t3 = document.createElement("span", null);
    t3.textContent = "X";
    t3.className = "segment-remove";
    t3.toString;
    t4 = new W._ElementEventStreamImpl(t3, C.EventStreamProvider_click._eventType, false);
    H.setRuntimeTypeInfo(t4, [null]);
    t5 = new W._EventStreamSubscription(0, t4._target, t4._eventType, W._wrapZone(new D.SourceHumanDetailsUI__onSegmentDrop_closure()), t4._useCapture);
    H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t4, "_EventStream", 0)]);
    t5._tryResume$0();
    t2.appendChild(t3);
    t1.appendChild(t2);
  },
  get$_onSegmentDrop: function() {
    return new H.BoundClosure$1(this, D.SourceHumanDetailsUI.prototype._onSegmentDrop$1, null, "_onSegmentDrop$1");
  },
  _onSegmentDragOver$1: function(e) {
    J.preventDefault$0$x(e);
  },
  get$_onSegmentDragOver: function() {
    return new H.BoundClosure$1(this, D.SourceHumanDetailsUI.prototype._onSegmentDragOver$1, null, "_onSegmentDragOver$1");
  },
  configureHumanTasks$0: function() {
    var askInputFromUserButton, t1, t2, buttonDiv, outerDiv;
    this.segmentList = this.parametersView.querySelector("ul");
    askInputFromUserButton = document.createElement("button", null);
    askInputFromUserButton.textContent = "Ask for";
    askInputFromUserButton.className = "btn btn-default btn-sm";
    askInputFromUserButton.toString;
    t1 = new W._ElementEventStreamImpl(askInputFromUserButton, C.EventStreamProvider_click._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = this.get$_addNewInput();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = document.createElement("select", null);
    t2.className = "form-control input-sm";
    this.availableInputs = t2;
    t2 = $.get$SOURCE_OPTIONS_HUMAN_INPUTS();
    t2.forEach$1(t2, new D.SourceHumanDetailsUI_configureHumanTasks_closure(this));
    buttonDiv = document.createElement("div", null);
    buttonDiv.className = "col-sm-3";
    buttonDiv.appendChild(askInputFromUserButton);
    t2 = document.createElement("div", null);
    t2.className = "col-sm-9";
    t2.appendChild(this.availableInputs);
    this.elementsDiv = t2;
    outerDiv = document.createElement("div", null);
    outerDiv.className = "row";
    outerDiv.appendChild(buttonDiv);
    outerDiv.appendChild(this.elementsDiv);
    this.parametersView.appendChild(outerDiv);
  },
  _addNewInput$1: function(e) {
    var ruleRow, t1, inputDef, inputType, elementRowDefinition, t2, t3, elementRowConfig, newEditableDiv;
    ruleRow = document.createElement("div", null);
    ruleRow.className = "row rule";
    new W._ElementAttributeMap(ruleRow)._element.setAttribute("data-segment", "segment-" + H.Primitives_objectHashCode(ruleRow));
    t1 = $.get$SOURCE_OPTIONS_HUMAN_INPUTS().get$keys();
    inputDef = t1.elementAt$1(t1, J.get$selectedIndex$x(this.availableInputs));
    t1 = $.get$SOURCE_OPTIONS_HUMAN_INPUTS();
    inputType = t1.$index(t1, inputDef);
    this.output.addElement$2$example("segment-" + H.Primitives_objectHashCode(ruleRow), H.S(inputDef) + " from human workers");
    elementRowDefinition = document.createElement("div", null);
    elementRowDefinition.className = "col-sm-3";
    t1 = document.createElement("button", null);
    t1.textContent = "-";
    t1.className = "btn btn-danger btn-xs";
    t1.toString;
    t2 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_click._eventType, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new D.SourceHumanDetailsUI__addNewInput_closure(this, ruleRow)), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    elementRowDefinition.appendChild(t1);
    t1 = document.createElement("label", null);
    t1.textContent = inputDef;
    t1.className = "text-muted";
    elementRowDefinition.appendChild(t1);
    ruleRow.appendChild(elementRowDefinition);
    elementRowConfig = document.createElement("div", null);
    elementRowConfig.className = "col-sm-9";
    switch (inputType) {
      case "text":
        t1 = W.InputElement_InputElement("number");
        t1.className = "form-control input-sm";
        J.set$placeholder$x(t1, "max. character length");
        new W._ElementAttributeMap(t1)._element.setAttribute("min", "1");
        new W._ElementAttributeMap(t1)._element.setAttribute("max", "255");
        elementRowConfig.appendChild(t1);
        break;
      case "number":
        t1 = W.InputElement_InputElement("number");
        J.set$placeholder$x(t1, "min. value");
        t1.className = "form-control input-sm input-xs";
        elementRowConfig.appendChild(t1);
        t1 = W.InputElement_InputElement("number");
        J.set$placeholder$x(t1, "max. value");
        t1.className = "form-control input-sm input-xs";
        elementRowConfig.appendChild(t1);
        break;
      case "single":
      case "multiple":
        newEditableDiv = this.getEditableDiv$0();
        this.refreshableDivs.push(newEditableDiv);
        elementRowConfig.appendChild(newEditableDiv);
        break;
      default:
    }
    ruleRow.appendChild(elementRowConfig);
    $.SourceHumanDetailsUI_count = $.SourceHumanDetailsUI_count + 1;
    this.parametersView.appendChild(ruleRow);
  },
  get$_addNewInput: function() {
    return new H.BoundClosure$1(this, D.SourceHumanDetailsUI.prototype._addNewInput$1, null, "_addNewInput$1");
  },
  getEditableDiv$0: function() {
    var t1, t2, t3;
    t1 = document.createElement("div", null);
    t1.contentEditable = "true";
    t1.className = "form-control input-sm";
    t1.textContent = "Enter options line by line";
    t1.toString;
    t2 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_drop._eventType, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t3 = this.get$_onSegmentDrop();
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_dragover._eventType, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t2 = this.get$_onSegmentDragOver();
    t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t2), t3._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t2._tryResume$0();
    return t1;
  },
  _deleteInput$2: function(e, rowId) {
    J.remove$0$ax(this.parametersView.querySelector("div[data-segment=\"" + rowId + "\"]"));
    this.output.removeElement$1(rowId);
  },
  SourceHumanDetailsUI$4: function(id, type, prevConn, nextConn) {
    var t1, t2;
    t1 = this.id;
    t2 = new D.InputHumanOutputSpecification(t1, null, null, null, null, null);
    t2.BaseSpecification$1(t1);
    this.output = t2;
    this.view.appendChild(this.output.view);
  },
  static: {
"": "SourceHumanDetailsUI_count",
SourceHumanDetailsUI$: function(id, type, prevConn, nextConn) {
  var t1 = new D.SourceHumanDetailsUI(null, null, null, null, null, null, N.Logger_Logger("OperatorDetails"), id, type, prevConn, nextConn, null, null, null, null, null, null);
  t1.BaseDetailsUI$4(id, type, prevConn, nextConn);
  t1.SourceHumanDetailsUI$4(id, type, prevConn, nextConn);
  return t1;
}}

},

SourceHumanDetailsUI_refresh_closure: {"": "Closure;this_0,prevSegments_1",
  call$1: function(e) {
    return this.this_0.refreshSegmentFromCurrent$2(J.querySelectorAll$1$x(e, "span.segment-tag"), this.prevSegments_1);
  },
  $is_args1: true
},

SourceHumanDetailsUI_refresh_closure0: {"": "Closure;this_2",
  call$2: function(id, segment) {
    return this.this_2.refreshSegmentFromPrevious$2(id, segment);
  },
  $is_args2: true
},

SourceHumanDetailsUI_refreshSegmentFromPrevious_closure: {"": "Closure;this_0,segment_1",
  call$1: function(e) {
    var t1 = this.segment_1;
    this.this_0._dragSegment = t1;
    return t1;
  },
  $is_args1: true
},

SourceHumanDetailsUI_refreshSegmentFromPrevious_closure0: {"": "Closure;id_2,segment_3",
  call$1: function(e) {
    var t1 = J.querySelectorAll$1$x(e, "span[data-segment=\"" + H.S(this.id_2) + "\"]");
    return t1.forEach$1(t1, new D.SourceHumanDetailsUI_refreshSegmentFromPrevious__closure(this.segment_3));
  },
  $is_args1: true
},

SourceHumanDetailsUI_refreshSegmentFromPrevious__closure: {"": "Closure;segment_4",
  call$1: function(e) {
    var t1, t2;
    t1 = J.querySelector$1$x(e, "span.segment-name");
    t2 = J.get$text$x(J.get$name$x(this.segment_4));
    t1.textContent = t2;
    return t2;
  },
  $is_args1: true
},

SourceHumanDetailsUI__onSegmentDrop_closure: {"": "Closure;",
  call$1: function(e) {
    return J.remove$0$ax(H.interceptedTypeCast(J.get$target$x(e), "$isSpanElement").parentElement);
  },
  $is_args1: true
},

SourceHumanDetailsUI_configureHumanTasks_closure: {"": "Closure;this_0",
  call$2: function($name, value) {
    return this.this_0.availableInputs.appendChild(W.OptionElement_OptionElement$_($name, value, null, false));
  },
  $is_args2: true
},

SourceHumanDetailsUI__addNewInput_closure: {"": "Closure;this_0,ruleRow_1",
  call$1: function(e) {
    return this.this_0._deleteInput$2(e, new W._ElementAttributeMap(this.ruleRow_1)._element.getAttribute("data-segment"));
  },
  $is_args1: true
},

SourceManualDetailsUI: {"": "BaseDetailsUI;log,id,type,prevConn,nextConn,output,base,elements,view,detailsView,parametersView",
  initialize$0: function(_) {
    D.BaseDetailsUI.prototype.initialize$0.call(this, this);
    this.addElement$5$features("input", "textarea", "Manual entry", this.elements, H.fillLiteralMap(["rows", "5"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    this.addElement$5$options("delimiter", "select", "Delimiter", this.elements, $.get$SOURCE_OPTIONS_NAMES());
  },
  _onRefresh$0: function() {
    var t1, text, t2, delimiter, delimitedString, segment, dumpSpan, t3, newElement, t4;
    t1 = this.elements;
    text = H.interceptedTypeCast(t1.$index(t1, "input").get$input(), "$isTextAreaElement").value;
    t1 = $.get$SOURCE_OPTIONS_VALUES();
    t2 = this.elements;
    t2 = H.Primitives_parseInt(H.interceptedTypeCast(t2.$index(t2, "delimiter").get$input(), "$isSelectElement").value, null, null);
    if (t2 >>> 0 !== t2 || t2 >= 5)
      throw H.ioore(t1, t2);
    delimiter = t1[t2];
    if (J.getInterceptor$asx(text).contains$1(text, "\n"))
      text = C.JSString_methods.substring$2(text, 0, C.JSString_methods.indexOf$1(text, "\n"));
    t1 = this.output;
    J.set$innerHtml$x(t1.elementList, "");
    t1 = t1.elements;
    t1.clear$0(t1);
    if (text.length !== 0 && delimiter.length !== 0)
      delimitedString = C.JSString_methods.trim$0(text).split(delimiter);
    else {
      delimitedString = P.List_List(null, J.JSString);
      H.setRuntimeTypeInfo(delimitedString, [J.JSString]);
      delimitedString.push("");
    }
    for (t1 = new H.ListIterator(delimitedString, delimitedString.length, 0, null); t1.moveNext$0();) {
      segment = t1._current;
      dumpSpan = document.createElement("span", null);
      t2 = this.output;
      t3 = "segment-" + J.get$hashCode$(dumpSpan);
      t2.toString;
      newElement = D.OutputSegmentUI$("", false, true);
      newElement.name.id = t3;
      t4 = t2.elements;
      t4.$indexSet(t4, t3, newElement);
      t2.elementList.appendChild(newElement.getFormElement$1(segment));
      t2 = dumpSpan.parentNode;
      if (t2 != null)
        t2.removeChild(dumpSpan);
    }
  },
  SourceManualDetailsUI$4: function(id, type, prevConn, nextConn) {
    var t1, t2, t3, t4;
    t1 = this.id;
    t2 = new D.InputManualOutputSpecification(t1, null, null, null, null, null);
    t2.BaseSpecification$1(t1);
    this.output = t2;
    t2 = this.output.title;
    t1 = document.createElement("button", null);
    t1.textContent = "(re)generate";
    t1.className = "btn btn-default btn-xs";
    t1.toString;
    t3 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_click._eventType, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t4 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(new D.SourceManualDetailsUI_closure(this)), t3._useCapture);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t4._tryResume$0();
    t2.appendChild(t1);
    this.view.appendChild(this.output.view);
  },
  static: {
SourceManualDetailsUI$: function(id, type, prevConn, nextConn) {
  var t1 = new D.SourceManualDetailsUI(N.Logger_Logger("OperatorDetails"), id, type, prevConn, nextConn, null, null, null, null, null, null);
  t1.BaseDetailsUI$4(id, type, prevConn, nextConn);
  t1.SourceManualDetailsUI$4(id, type, prevConn, nextConn);
  return t1;
}}

},

SourceManualDetailsUI_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._onRefresh$0();
  },
  $is_args1: true
},

SourceRSSDetailsUI: {"": "BaseDetailsUI;log,id,type,prevConn,nextConn,output,base,elements,view,detailsView,parametersView",
  initialize$0: function(_) {
    D.BaseDetailsUI.prototype.initialize$0.call(this, this);
    this.addElement$4("webpage", "url", "Feed URL", this.elements);
  }
},

SinkFileDetailsUI: {"": "BaseDetailsUI;log,id,type,prevConn,nextConn,output,base,elements,view,detailsView,parametersView",
  initialize$0: function(_) {
    D.BaseDetailsUI.prototype.initialize$0.call(this, this);
    this.addElement$4("output", "text", "File name", this.elements);
  }
},

SinkEmailDetailsUI: {"": "BaseDetailsUI;log,id,type,prevConn,nextConn,output,base,elements,view,detailsView,parametersView",
  initialize$0: function(_) {
    D.BaseDetailsUI.prototype.initialize$0.call(this, this);
    this.addElement$4("email", "email", "email address", this.elements);
  }
},

SelectionDetailsUI: {"": "RuleDetailsUI;rulesDiv,addRuleButton,log,id,type,prevConn,nextConn,output,base,elements,view,detailsView,parametersView",
  initialize$0: function(_) {
    D.RuleDetailsUI.prototype.initialize$0.call(this, this);
  },
  _addRule$1: function(e) {
    var t1, parameter, conditionDiv, t2, t3, t4, configDiv;
    t1 = this.prevConn;
    if (t1._collection$_length < 1) {
      this.log.warning$1("Please first make sure there is an input flow to this operator.");
      return;
    }
    parameter = document.createElement("div", null);
    parameter.className = "row rule";
    parameter.id = this.id + "-rule-" + $.SelectionDetailsUI_count;
    conditionDiv = document.createElement("div", null);
    conditionDiv.className = "col-sm-3";
    t2 = document.createElement("button", null);
    t2.textContent = "-";
    t2.className = "btn btn-danger btn-xs";
    t2.toString;
    t3 = new W._ElementEventStreamImpl(t2, C.EventStreamProvider_click._eventType, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t4 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(new D.SelectionDetailsUI__addRule_closure(this, parameter)), t3._useCapture);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t4._tryResume$0();
    conditionDiv.appendChild(t2);
    t2 = document.createElement("label", null);
    t2.textContent = "Filter";
    t2.className = "text-muted";
    conditionDiv.appendChild(t2);
    configDiv = document.createElement("div", null);
    configDiv.className = "col-sm-9";
    t2 = document.createElement("ul", null);
    t2.className = "list-inline";
    t4 = document.createElement("li", null);
    t3 = document.createElement("select", null);
    t3.className = "form-control input-sm";
    t3.appendChild(W.OptionElement_OptionElement$_("in", "in", null, false));
    t3.appendChild(W.OptionElement_OptionElement$_("out", "out", null, false));
    t4.appendChild(t3);
    t2.appendChild(t4);
    t4 = document.createElement("li", null);
    t3 = document.createElement("span", null);
    t3.textContent = "when";
    t4.appendChild(t3);
    t2.appendChild(t4);
    t4 = document.createElement("li", null);
    t3 = this.output;
    t4.appendChild(t3.select$1(t3, t1));
    t2.appendChild(t4);
    t4 = document.createElement("li", null);
    t1 = document.createElement("select", null);
    t1.className = "form-control input-sm";
    t1.appendChild(W.OptionElement_OptionElement$_("equals", "equals", null, false));
    t1.appendChild(W.OptionElement_OptionElement$_("not equals", "not equals", null, false));
    t1.appendChild(W.OptionElement_OptionElement$_("contains", "contains", null, false));
    t4.appendChild(t1);
    t2.appendChild(t4);
    t4 = document.createElement("li", null);
    t1 = W.InputElement_InputElement("text");
    t1.className = "form-control input-sm";
    t4.appendChild(t1);
    t2.appendChild(t4);
    configDiv.appendChild(t2);
    $.SelectionDetailsUI_count = $.SelectionDetailsUI_count + 1;
    parameter.appendChild(conditionDiv);
    parameter.appendChild(configDiv);
    this.rulesDiv.appendChild(parameter);
  },
  get$_addRule: function() {
    return new H.BoundClosure$1(this, D.SelectionDetailsUI.prototype._addRule$1, null, "_addRule$1");
  },
  SelectionDetailsUI$4: function(id, type, prevConn, nextConn) {
    var t1, t2;
    t1 = this.id;
    t2 = new D.SelectionOutputSpecification(this, t1, null, null, null, null, null);
    t2.BaseSpecification$1(t1);
    this.output = t2;
    this.view.appendChild(this.output.view);
  },
  static: {
"": "SelectionDetailsUI_count",
SelectionDetailsUI$: function(id, type, prevConn, nextConn) {
  var t1, t2, t3;
  t1 = new D.SelectionDetailsUI(null, null, N.Logger_Logger("OperatorDetails"), id, type, prevConn, nextConn, null, null, null, null, null, null);
  t1.BaseDetailsUI$4(id, type, prevConn, nextConn);
  t2 = t1.id;
  t3 = new D.OutputSpecification(t2, null, null, null, null, null);
  t3.BaseSpecification$1(t2);
  t1.output = t3;
  t1.SelectionDetailsUI$4(id, type, prevConn, nextConn);
  return t1;
}}

},

SelectionDetailsUI__addRule_closure: {"": "Closure;this_0,parameter_1",
  call$1: function(e) {
    var t1 = this.parameter_1.id;
    J.remove$0$ax(this.this_0.rulesDiv.querySelector("#" + t1));
    return;
  },
  $is_args1: true
},

SortDetailsUI: {"": "RuleDetailsUI;rulesDiv,addRuleButton,log,id,type,prevConn,nextConn,output,base,elements,view,detailsView,parametersView",
  initialize$0: function(_) {
    D.RuleDetailsUI.prototype.initialize$0.call(this, this);
    this.addElement$5$features("size", "number", "Window size", this.elements, H.fillLiteralMap(["min", "1", "max", "100", "value", "1"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    this.parametersView.appendChild(this.rulesDiv);
  },
  _addRule$1: function(e) {
    var t1, parameter, conditionDiv, t2, t3, t4, configDiv;
    t1 = this.prevConn;
    if (t1._collection$_length < 1) {
      this.log.warning$1("Please first make sure there is an input flow to this operator.");
      return;
    }
    parameter = document.createElement("div", null);
    parameter.className = "row rule";
    parameter.id = this.id + "-rule-" + $.SortDetailsUI_count;
    conditionDiv = document.createElement("div", null);
    conditionDiv.className = "col-sm-3";
    t2 = document.createElement("button", null);
    t2.textContent = "-";
    t2.className = "btn btn-danger btn-xs";
    t2.toString;
    t3 = new W._ElementEventStreamImpl(t2, C.EventStreamProvider_click._eventType, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t4 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(new D.SortDetailsUI__addRule_closure(this, parameter)), t3._useCapture);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t4._tryResume$0();
    conditionDiv.appendChild(t2);
    t2 = document.createElement("label", null);
    t2.textContent = "Sort using";
    t2.className = "text-muted";
    conditionDiv.appendChild(t2);
    configDiv = document.createElement("div", null);
    configDiv.className = "col-sm-9";
    t2 = document.createElement("ul", null);
    t2.className = "list-inline";
    t4 = document.createElement("li", null);
    t3 = this.output;
    t4.appendChild(t3.select$1(t3, t1));
    t2.appendChild(t4);
    t4 = document.createElement("li", null);
    t1 = document.createElement("span", null);
    t1.textContent = "in";
    t4.appendChild(t1);
    t2.appendChild(t4);
    t4 = document.createElement("li", null);
    t1 = document.createElement("select", null);
    t1.className = "form-control input-sm";
    t1.appendChild(W.OptionElement_OptionElement$_("ascending", "ascending", null, false));
    t1.appendChild(W.OptionElement_OptionElement$_("descending", "descending", null, false));
    t4.appendChild(t1);
    t2.appendChild(t4);
    t4 = document.createElement("li", null);
    t1 = document.createElement("span", null);
    t1.textContent = "order";
    t4.appendChild(t1);
    t2.appendChild(t4);
    configDiv.appendChild(t2);
    $.SortDetailsUI_count = $.SortDetailsUI_count + 1;
    parameter.appendChild(conditionDiv);
    parameter.appendChild(configDiv);
    this.rulesDiv.appendChild(parameter);
  },
  get$_addRule: function() {
    return new H.BoundClosure$1(this, D.SortDetailsUI.prototype._addRule$1, null, "_addRule$1");
  },
  SortDetailsUI$4: function(id, type, prevConn, nextConn) {
    var t1, t2;
    t1 = this.id;
    t2 = new D.SortOutputSpecification(this, t1, null, null, null, null, null);
    t2.BaseSpecification$1(t1);
    this.output = t2;
    this.view.appendChild(this.output.view);
  },
  static: {
"": "SortDetailsUI_count",
SortDetailsUI$: function(id, type, prevConn, nextConn) {
  var t1, t2, t3;
  t1 = new D.SortDetailsUI(null, null, N.Logger_Logger("OperatorDetails"), id, type, prevConn, nextConn, null, null, null, null, null, null);
  t1.BaseDetailsUI$4(id, type, prevConn, nextConn);
  t2 = t1.id;
  t3 = new D.OutputSpecification(t2, null, null, null, null, null);
  t3.BaseSpecification$1(t2);
  t1.output = t3;
  t1.SortDetailsUI$4(id, type, prevConn, nextConn);
  return t1;
}}

},

SortDetailsUI__addRule_closure: {"": "Closure;this_0,parameter_1",
  call$1: function(e) {
    var t1 = this.parameter_1.id;
    J.remove$0$ax(this.this_0.rulesDiv.querySelector("#" + t1));
    return;
  },
  $is_args1: true
},

SplitDetailsUI: {"": "RuleDetailsUI;rulesDiv,addRuleButton,log,id,type,prevConn,nextConn,output,base,elements,view,detailsView,parametersView",
  outputSelectElement$0: function() {
    var selectElement, t1;
    selectElement = document.createElement("select", null);
    selectElement.className = "output-flows form-control input-sm";
    t1 = this.nextConn;
    t1.forEach$1(t1, new D.SplitDetailsUI_outputSelectElement_closure(selectElement));
    return selectElement;
  },
  _addRule$1: function(e) {
    var t1, parameter, conditionDiv, t2, t3, t4, t5, t6, configDiv;
    if (this.nextConn._collection$_length < 1) {
      this.log.warning$1("Please first make sure there is an output flow from this operator.");
      return;
    }
    t1 = this.prevConn;
    if (t1._collection$_length < 1) {
      this.log.warning$1("Please first make sure there is an input flow to this operator.");
      return;
    }
    parameter = document.createElement("div", null);
    parameter.className = "row rule";
    parameter.id = this.id + "-rule-" + $.SplitDetailsUI_count;
    conditionDiv = document.createElement("div", null);
    conditionDiv.className = "col-sm-3";
    t2 = document.createElement("ul", null);
    t2.className = "list-inline";
    t3 = document.createElement("li", null);
    t4 = document.createElement("button", null);
    t4.textContent = "-";
    t4.className = "btn btn-danger btn-xs";
    t4.toString;
    t5 = new W._ElementEventStreamImpl(t4, C.EventStreamProvider_click._eventType, false);
    H.setRuntimeTypeInfo(t5, [null]);
    t6 = new W._EventStreamSubscription(0, t5._target, t5._eventType, W._wrapZone(new D.SplitDetailsUI__addRule_closure(this, parameter)), t5._useCapture);
    H.setRuntimeTypeInfo(t6, [H.getRuntimeTypeArgument(t5, "_EventStream", 0)]);
    t6._tryResume$0();
    t3.appendChild(t4);
    t2.appendChild(t3);
    t3 = document.createElement("li", null);
    t4 = document.createElement("span", null);
    t4.textContent = "Send to";
    t3.appendChild(t4);
    t2.appendChild(t3);
    conditionDiv.appendChild(t2);
    configDiv = document.createElement("div", null);
    configDiv.className = "col-sm-9";
    t2 = document.createElement("ul", null);
    t2.className = "list-inline";
    t3 = document.createElement("li", null);
    t3.appendChild(this.outputSelectElement$0());
    t2.appendChild(t3);
    t3 = document.createElement("li", null);
    t4 = document.createElement("span", null);
    t4.textContent = "when";
    t3.appendChild(t4);
    t2.appendChild(t3);
    t3 = document.createElement("li", null);
    t4 = this.output;
    t3.appendChild(t4.select$1(t4, t1));
    t2.appendChild(t3);
    t3 = document.createElement("li", null);
    t1 = document.createElement("select", null);
    t1.className = "form-control input-sm";
    t1.appendChild(W.OptionElement_OptionElement$_("equals", "equals", null, false));
    t1.appendChild(W.OptionElement_OptionElement$_("not equals", "not equals", null, false));
    t1.appendChild(W.OptionElement_OptionElement$_("contains", "contains", null, false));
    t3.appendChild(t1);
    t2.appendChild(t3);
    t3 = document.createElement("li", null);
    t1 = W.InputElement_InputElement("text");
    t1.className = "form-control input-sm";
    t3.appendChild(t1);
    t2.appendChild(t3);
    configDiv.appendChild(t2);
    $.SplitDetailsUI_count = $.SplitDetailsUI_count + 1;
    parameter.appendChild(conditionDiv);
    parameter.appendChild(configDiv);
    this.rulesDiv.appendChild(parameter);
  },
  get$_addRule: function() {
    return new H.BoundClosure$1(this, D.SplitDetailsUI.prototype._addRule$1, null, "_addRule$1");
  },
  SplitDetailsUI$4: function(id, type, prevConn, nextConn) {
    var t1, t2;
    t1 = this.id;
    t2 = new D.SplitOutputSpecification(this, t1, null, null, null, null, null);
    t2.BaseSpecification$1(t1);
    this.output = t2;
    this.view.appendChild(this.output.view);
  },
  $isSplitDetailsUI: true,
  static: {
"": "SplitDetailsUI_count",
SplitDetailsUI$: function(id, type, prevConn, nextConn) {
  var t1, t2, t3;
  t1 = new D.SplitDetailsUI(null, null, N.Logger_Logger("OperatorDetails"), id, type, prevConn, nextConn, null, null, null, null, null, null);
  t1.BaseDetailsUI$4(id, type, prevConn, nextConn);
  t2 = t1.id;
  t3 = new D.OutputSpecification(t2, null, null, null, null, null);
  t3.BaseSpecification$1(t2);
  t1.output = t3;
  t1.SplitDetailsUI$4(id, type, prevConn, nextConn);
  return t1;
}}

},

SplitDetailsUI_outputSelectElement_closure: {"": "Closure;selectElement_0",
  call$2: function(identifier, connected) {
    return this.selectElement_0.appendChild(W.OptionElement_OptionElement$_(identifier, identifier, null, false));
  },
  $is_args2: true
},

SplitDetailsUI__addRule_closure: {"": "Closure;this_0,parameter_1",
  call$1: function(e) {
    var t1 = this.parameter_1.id;
    J.remove$0$ax(this.this_0.rulesDiv.querySelector("#" + t1));
    return;
  },
  $is_args1: true
},

BaseOperatorUI: {"": "Object;group<",
  initialize$0: function(_) {
    $.canvas.appendChild(this.group);
  },
  _onClick$1: function(e) {
    var t1 = $.selectedOperator;
    if (t1 != null)
      t1.group.setAttribute("class", "");
    if (this !== t1) {
      $.selectedOperator = this;
      $.selectedOperator.group.setAttribute("class", "selected");
    } else
      $.selectedOperator = null;
  },
  _onMouseDown$1: function(e) {
    var t1, mouseCoordinates, t2;
    J.preventDefault$0$x(e);
    this._onClick$1(e);
    this.dragging = true;
    t1 = this.group;
    t1.parentNode.appendChild(t1);
    mouseCoordinates = D.getMouseCoordinatesProportinalToCanvas(e);
    this.dragOffsetX = J.$sub$n(mouseCoordinates.$index(mouseCoordinates, "x"), J.getCtm$0$x(this.group).e);
    this.dragOffsetY = J.$sub$n(mouseCoordinates.$index(mouseCoordinates, "y"), J.getCtm$0$x(this.group).f);
    t1 = $.canvas;
    t1.toString;
    t1 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_mousemove._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = this.get$_moveStarted();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2.resume$0();
    t2 = $.canvas;
    t2.toString;
    t2 = new W._ElementEventStreamImpl(t2, C.EventStreamProvider_mouseup._eventType, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t1 = this.get$_moveCompleted();
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1.resume$0();
  },
  get$_onMouseDown: function() {
    return new H.BoundClosure$1(this, D.BaseOperatorUI.prototype._onMouseDown$1, null, "_onMouseDown$1");
  },
  _onMouseEnter$1: function(e) {
    J.set$cursor$x(this.body.style, "move");
  },
  get$_onMouseEnter: function() {
    return new H.BoundClosure$1(this, D.BaseOperatorUI.prototype._onMouseEnter$1, null, "_onMouseEnter$1");
  },
  _moveStarted$1: function(e) {
    var mouseCoordinates, newX, newY;
    if (this.dragging === true) {
      mouseCoordinates = D.getMouseCoordinatesProportinalToCanvas(e);
      newX = J.$sub$n(mouseCoordinates.$index(mouseCoordinates, "x"), this.dragOffsetX);
      newY = J.$sub$n(mouseCoordinates.$index(mouseCoordinates, "y"), this.dragOffsetY);
      this.group.setAttribute("transform", "translate(" + H.S(newX) + ", " + H.S(newY) + ")");
      this.group.dispatchEvent(W.CustomEvent_CustomEvent("stream_unit_moving", true, true, [newX, newY]));
    }
  },
  get$_moveStarted: function() {
    return new H.BoundClosure$1(this, D.BaseOperatorUI.prototype._moveStarted$1, null, "_moveStarted$1");
  },
  _moveCompleted$1: function(e) {
    var t1, t2;
    this.dragging = false;
    t1 = $.canvas;
    t1.toString;
    t1 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_mousemove._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = this.get$_moveStarted();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2.cancel$0();
    t2 = $.canvas;
    t2.toString;
    t2 = new W._ElementEventStreamImpl(t2, C.EventStreamProvider_mouseup._eventType, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t1 = this.get$_moveCompleted();
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1.cancel$0();
  },
  get$_moveCompleted: function() {
    return new H.BoundClosure$1(this, D.BaseOperatorUI.prototype._moveCompleted$1, null, "_moveCompleted$1");
  },
  _onKeyDown$1: function(e) {
    if (J.get$keyCode$x(e) === 8 && J.get$display$x($.get$modal().style) !== "block") {
      e.preventDefault();
      if ($.selectedOperator === this)
        this.remove$0(this);
    }
  },
  get$_onKeyDown: function() {
    return new H.BoundClosure$1(this, D.BaseOperatorUI.prototype._onKeyDown$1, null, "_onKeyDown$1");
  },
  remove$0: function(_) {
    var t1;
    this.group.dispatchEvent(W.CustomEvent_CustomEvent("stream_unit_removed", true, true, null));
    t1 = J.get$children$x($.canvas);
    t1.remove$1(t1, this.group);
  },
  addBackgroundImage$1: function(image) {
    var t1, temp, t2, t3;
    t1 = this.group;
    temp = document.createElementNS("http://www.w3.org/2000/svg", "image");
    temp.setAttribute("x", H.S(J.$sub$n(J.$sub$n(J.$add$ns(this.x, this.width), 20), 3)));
    temp.setAttribute("y", H.S(J.$sub$n(J.$sub$n(J.$add$ns(this.y, this.height), 14), 3)));
    temp.setAttribute("width", "20");
    temp.setAttribute("height", "14");
    temp.setAttributeNS("http://www.w3.org/1999/xlink", "href", "static/img/" + image);
    t2 = new W._ElementEventStreamImpl(temp, C.EventStreamProvider_mousedown._eventType, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t3 = this.get$_onMouseDown();
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    t1.appendChild(temp);
  },
  BaseOperatorUI$5: function(id, mouseX, mouseY, width, height) {
    var t1, t2, temp;
    t1 = this.width;
    this.x = J.$sub$n(mouseX, t1 / 2);
    t2 = this.height;
    this.y = J.$sub$n(mouseY, t2 / 2);
    temp = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    temp.setAttribute("x", H.S(this.x));
    temp.setAttribute("y", H.S(this.y));
    temp.setAttribute("width", H.S(t1));
    temp.setAttribute("height", "" + t2);
    t2 = J.get$classes$x(temp);
    t2.add$1(t2, "processing_body");
    t2 = new W._ElementEventStreamImpl(temp, C.EventStreamProvider_mousedown._eventType, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t1 = this.get$_onMouseDown();
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = new W._ElementEventStreamImpl(temp, C.EventStreamProvider_mouseenter._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = this.get$_onMouseEnter();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    this.body = temp;
    temp = document.createElementNS("http://www.w3.org/2000/svg", "g");
    temp.setAttribute("id", this.id);
    temp.appendChild(this.body);
    this.group = temp;
    this.dragging = false;
    t2 = new W._EventStream(document, C.EventStreamProvider_keydown._eventType, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t1 = this.get$_onKeyDown();
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
  }
},

SourceOperatorUI: {"": "BaseOperatorUI;outputPort,group,body,id,dragging,x,y,dragOffsetX,dragOffsetY,width,height",
  SourceOperatorUI$5: function(id, x, y, width, height) {
    this.outputPort = D.PortUI$(this.group, x, y, width, height, 6, false);
    this.addBackgroundImage$1("input.png");
  },
  static: {
SourceOperatorUI$: function(id, x, y, width, height) {
  var t1 = new D.SourceOperatorUI(null, null, null, id, null, null, null, null, null, width, height);
  t1.BaseOperatorUI$5(id, x, y, width, height);
  t1.SourceOperatorUI$5(id, x, y, width, height);
  return t1;
}}

},

SinkOperatorUI: {"": "BaseOperatorUI;inputPort,group,body,id,dragging,x,y,dragOffsetX,dragOffsetY,width,height",
  SinkOperatorUI$5: function(id, x, y, width, height) {
    this.inputPort = D.PortUI$(this.group, x, y, width, height, 6, true);
    this.addBackgroundImage$1("output.png");
  },
  static: {
SinkOperatorUI$: function(id, x, y, width, height) {
  var t1 = new D.SinkOperatorUI(null, null, null, id, null, null, null, null, null, width, height);
  t1.BaseOperatorUI$5(id, x, y, width, height);
  t1.SinkOperatorUI$5(id, x, y, width, height);
  return t1;
}}

},

ProcessingOperatorUI: {"": "BaseOperatorUI;inputPort,outputPort,group,body,id,dragging,x,y,dragOffsetX,dragOffsetY,width,height",
  ProcessingOperatorUI$5: function(id, x, y, width, height) {
    this.inputPort = D.PortUI$(this.group, x, y, width, height, 6, true);
    this.outputPort = D.PortUI$(this.group, x, y, width, height, 6, false);
    this.addBackgroundImage$1("processing.png");
  },
  static: {
ProcessingOperatorUI$: function(id, x, y, width, height) {
  var t1 = new D.ProcessingOperatorUI(null, null, null, null, id, null, null, null, null, null, width, height);
  t1.BaseOperatorUI$5(id, x, y, width, height);
  t1.ProcessingOperatorUI$5(id, x, y, width, height);
  return t1;
}}

},

SelectionOperatorUI: {"": "BaseOperatorUI;inputPort,outputPort,group,body,id,dragging,x,y,dragOffsetX,dragOffsetY,width,height",
  SelectionOperatorUI$5: function(id, x, y, width, height) {
    this.inputPort = D.PortUI$(this.group, x, y, width, height, 6, true);
    this.outputPort = D.PortUI$(this.group, x, y, width, height, 6, false);
    this.addBackgroundImage$1("selection.png");
  },
  static: {
SelectionOperatorUI$: function(id, x, y, width, height) {
  var t1 = new D.SelectionOperatorUI(null, null, null, null, id, null, null, null, null, null, width, height);
  t1.BaseOperatorUI$5(id, x, y, width, height);
  t1.SelectionOperatorUI$5(id, x, y, width, height);
  return t1;
}}

},

SplitOperatorUI: {"": "BaseOperatorUI;inputPort,outputPort,group,body,id,dragging,x,y,dragOffsetX,dragOffsetY,width,height",
  SplitOperatorUI$5: function(id, x, y, width, height) {
    this.inputPort = D.PortUI$(this.group, x, y, width, height, 6, true);
    this.outputPort = D.PortUI$(this.group, x, y, width, height, 6, false);
    this.addBackgroundImage$1("split.png");
  },
  static: {
SplitOperatorUI$: function(id, x, y, width, height) {
  var t1 = new D.SplitOperatorUI(null, null, null, null, id, null, null, null, null, null, width, height);
  t1.BaseOperatorUI$5(id, x, y, width, height);
  t1.SplitOperatorUI$5(id, x, y, width, height);
  return t1;
}}

},

UnionOperatorUI: {"": "BaseOperatorUI;inputPort,outputPort,group,body,id,dragging,x,y,dragOffsetX,dragOffsetY,width,height",
  UnionOperatorUI$5: function(id, x, y, width, height) {
    this.inputPort = D.PortUI$(this.group, x, y, width, height, 6, true);
    this.outputPort = D.PortUI$(this.group, x, y, width, height, 6, false);
    this.addBackgroundImage$1("union.png");
  },
  $isUnionOperatorUI: true,
  static: {
UnionOperatorUI$: function(id, x, y, width, height) {
  var t1 = new D.UnionOperatorUI(null, null, null, null, id, null, null, null, null, null, width, height);
  t1.BaseOperatorUI$5(id, x, y, width, height);
  t1.UnionOperatorUI$5(id, x, y, width, height);
  return t1;
}}

},

SortOperatorUI: {"": "BaseOperatorUI;inputPort,outputPort,group,body,id,dragging,x,y,dragOffsetX,dragOffsetY,width,height",
  SortOperatorUI$5: function(id, x, y, width, height) {
    this.inputPort = D.PortUI$(this.group, x, y, width, height, 6, true);
    this.outputPort = D.PortUI$(this.group, x, y, width, height, 6, false);
    this.addBackgroundImage$1("sort.png");
  },
  static: {
SortOperatorUI$: function(id, x, y, width, height) {
  var t1 = new D.SortOperatorUI(null, null, null, null, id, null, null, null, null, null, width, height);
  t1.BaseOperatorUI$5(id, x, y, width, height);
  t1.SortOperatorUI$5(id, x, y, width, height);
  return t1;
}}

},

EnrichOperatorUI: {"": "BaseOperatorUI;inputPort,outputPort,group,body,id,dragging,x,y,dragOffsetX,dragOffsetY,width,height",
  EnrichOperatorUI$5: function(id, x, y, width, height) {
    this.inputPort = D.PortUI$(this.group, x, y, width, height, 6, true);
    this.outputPort = D.PortUI$(this.group, x, y, width, height, 6, false);
    this.addBackgroundImage$1("enrich.png");
  },
  static: {
EnrichOperatorUI$: function(id, x, y, width, height) {
  var t1 = new D.EnrichOperatorUI(null, null, null, null, id, null, null, null, null, null, width, height);
  t1.BaseOperatorUI$5(id, x, y, width, height);
  t1.EnrichOperatorUI$5(id, x, y, width, height);
  return t1;
}}

},

PortUI: {"": "Object;log,group<,body,point<,size,width,height,initX,initY,input<",
  _onMouseDown$1: function(e) {
    var t1, t2;
    J.preventDefault$0$x(e);
    t1 = $.selectedPort;
    if (t1 != null)
      t1.body.setAttribute("class", "port");
    $.selectedPort = this;
    $.selectedPort.body.setAttribute("class", "port selected");
    t1 = $.tempLine;
    t1.toString;
    new W._ElementAttributeMap(t1)._element.setAttribute("x1", H.S($.selectedPort.point.x));
    t1 = $.tempLine;
    t1.toString;
    new W._ElementAttributeMap(t1)._element.setAttribute("y1", H.S($.selectedPort.point.y));
    t1 = $.tempLine;
    t1.toString;
    new W._ElementAttributeMap(t1)._element.setAttribute("x2", H.S($.selectedPort.point.x));
    t1 = $.tempLine;
    t1.toString;
    new W._ElementAttributeMap(t1)._element.setAttribute("y2", H.S($.selectedPort.point.y));
    t1 = new W._EventStream(document, C.EventStreamProvider_mousemove._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = this.get$_onMouseMove();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2.resume$0();
  },
  get$_onMouseDown: function() {
    return new H.BoundClosure$1(this, D.PortUI.prototype._onMouseDown$1, null, "_onMouseDown$1");
  },
  _onMouseEnter$1: function(e) {
    J.set$cursor$x(this.body.style, "pointer");
  },
  get$_onMouseEnter: function() {
    return new H.BoundClosure$1(this, D.PortUI.prototype._onMouseEnter$1, null, "_onMouseEnter$1");
  },
  _onMouseMove$1: function(e) {
    var mouseCoordinates, t1;
    if ($.selectedPort != null) {
      mouseCoordinates = D.getMouseCoordinatesRelativeToCanvas(e);
      t1 = $.tempLine;
      t1.toString;
      new W._ElementAttributeMap(t1)._element.setAttribute("x2", H.S(mouseCoordinates.$index(mouseCoordinates, "x")));
      t1 = $.tempLine;
      t1.toString;
      new W._ElementAttributeMap(t1)._element.setAttribute("y2", H.S(mouseCoordinates.$index(mouseCoordinates, "y")));
    }
  },
  get$_onMouseMove: function() {
    return new H.BoundClosure$1(this, D.PortUI.prototype._onMouseMove$1, null, "_onMouseMove$1");
  },
  _onMouseUp$1: function(e) {
    var t1, t2;
    t1 = $.selectedPort;
    if (t1 != null) {
      t1.body.setAttribute("class", "port");
      $.selectedPort = null;
    }
    t1 = $.tempLine;
    t1.toString;
    new W._ElementAttributeMap(t1)._element.setAttribute("x1", "0");
    t1 = $.tempLine;
    t1.toString;
    new W._ElementAttributeMap(t1)._element.setAttribute("y1", "0");
    t1 = $.tempLine;
    t1.toString;
    new W._ElementAttributeMap(t1)._element.setAttribute("x2", "0");
    t1 = $.tempLine;
    t1.toString;
    new W._ElementAttributeMap(t1)._element.setAttribute("y2", "0");
    t1 = new W._EventStream(document, C.EventStreamProvider_mousemove._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = this.get$_onMouseMove();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2.cancel$0();
  },
  get$_onMouseUp: function() {
    return new H.BoundClosure$1(this, D.PortUI.prototype._onMouseUp$1, null, "_onMouseUp$1");
  },
  _onMouseUpPort$1: function(e) {
    this.draw$1(e);
  },
  get$_onMouseUpPort: function() {
    return new H.BoundClosure$1(this, D.PortUI.prototype._onMouseUpPort$1, null, "_onMouseUpPort$1");
  },
  draw$1: function(e) {
    var t1 = $.selectedPort;
    if (t1 != null && this !== t1) {
      if (J.get$hashCode$(t1.group) === J.get$hashCode$(this.group))
        this.log.warning$1("You cannot add a flow within the same unit.");
      else {
        t1 = $.selectedPort;
        if (!t1.input && this.input)
          $.canvas.dispatchEvent(W.CustomEvent_CustomEvent("stream_draw_line", true, true, [t1, this]));
        else
          this.log.warning$1("You can only direct flow from an input port to outpot port.");
      }
      $.selectedPort.body.setAttribute("class", "port");
      $.selectedPort = null;
    }
  },
  move$1: function(e) {
    var t1, t2, t3, t4;
    t1 = this.point;
    t2 = this.initX;
    t3 = J.getInterceptor$x(e);
    t4 = J.$index$asx(t3.get$detail(e), 0);
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t1.x = t2 + t4;
    t4 = this.point;
    t2 = this.initY;
    t3 = J.$index$asx(t3.get$detail(e), 1);
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4.y = t2 + t3;
    this.body.dispatchEvent(W.CustomEvent_CustomEvent("stream_port_moving", true, true, null));
  },
  get$move: function() {
    return new H.BoundClosure$1(this, D.PortUI.prototype.move$1, null, "move$1");
  },
  remove$1: function(_, e) {
    this.body.dispatchEvent(W.CustomEvent_CustomEvent("stream_port_removed", true, true, null));
    if ($.selectedPort === this)
      $.selectedPort = null;
  },
  get$remove: function(_receiver) {
    return new D.BoundClosure$i1(this, D.PortUI.prototype.remove$1, _receiver, "remove$1");
  },
  PortUI$7$input: function(group, x, y, width, height, size, input) {
    var t1, t2, t3, t4, xCoor, yCoor, t5;
    this.body = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    t1 = this.size;
    t2 = t1 / 2;
    t3 = J.$sub$n(x, t2);
    t4 = this.width;
    if (this.input) {
      if (typeof t4 !== "number")
        throw H.iae(t4);
      t4 = -1 * t4 / 2;
    } else {
      if (typeof t4 !== "number")
        throw t4.$div();
      t4 /= 2;
    }
    xCoor = J.$add$ns(t3, t4);
    yCoor = J.$sub$n(y, t2);
    this.body.setAttribute("x", H.S(xCoor));
    this.body.setAttribute("y", H.S(yCoor));
    this.body.setAttribute("width", "" + t1);
    this.body.setAttribute("height", "" + t1);
    t4 = J.get$classes$x(this.body);
    t4.add$1(t4, "port");
    t4 = this.body;
    t4.toString;
    t4 = new W._ElementEventStreamImpl(t4, C.EventStreamProvider_mousedown._eventType, false);
    H.setRuntimeTypeInfo(t4, [null]);
    t3 = this.get$_onMouseDown();
    t3 = new W._EventStreamSubscription(0, t4._target, t4._eventType, W._wrapZone(t3), t4._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t4, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = this.body;
    t3.toString;
    t3 = new W._ElementEventStreamImpl(t3, C.EventStreamProvider_mouseenter._eventType, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t4 = this.get$_onMouseEnter();
    t4 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t4), t3._useCapture);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t4._tryResume$0();
    t4 = this.body;
    t4.toString;
    t3 = C.EventStreamProvider_mouseup._eventType;
    t4 = new W._ElementEventStreamImpl(t4, t3, false);
    H.setRuntimeTypeInfo(t4, [null]);
    t5 = this.get$_onMouseUpPort();
    t5 = new W._EventStreamSubscription(0, t4._target, t4._eventType, W._wrapZone(t5), t4._useCapture);
    H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t4, "_EventStream", 0)]);
    t5._tryResume$0();
    t3 = new W._EventStream(document, t3, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t5 = this.get$_onMouseUp();
    t5 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t5), t3._useCapture);
    H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t5._tryResume$0();
    t5 = new W._EventStream(document, C.EventStreamProvider_mousemove._eventType, false);
    H.setRuntimeTypeInfo(t5, [null]);
    t3 = this.get$_onMouseMove();
    t3 = new W._EventStreamSubscription(0, t5._target, t5._eventType, W._wrapZone(t3), t5._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t5, "_EventStream", 0)]);
    t3._tryResume$0();
    t3.cancel$0();
    this.point = J.createSvgPoint$0$x($.canvas);
    t3 = this.point;
    t3.x = J.$add$ns(xCoor, this.input ? 0 : t1);
    this.point.y = J.$add$ns(yCoor, t2);
    this.initX = this.point.x;
    this.initY = this.point.y;
    this.group.appendChild(this.body);
    t1 = J.get$on$x(this.body.parentElement);
    t1 = t1.$index(t1, "stream_unit_moving");
    t2 = this.get$move();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = J.get$on$x(this.body.parentElement);
    t2 = t2.$index(t2, "stream_unit_removed");
    t1 = this.get$remove(this);
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
  },
  static: {
PortUI$: function(group, x, y, width, height, size, input) {
  var t1 = new D.PortUI(N.Logger_Logger("Port"), group, null, null, size, width, height, null, null, input);
  t1.PortUI$7$input(group, x, y, width, height, size, input);
  return t1;
}}

}},
1],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
  else
    for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround_any: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    if (f.call$1(t1._current) === true)
      return true;
  return false;
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  if (end < start || end > list.length)
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

printToConsole: function(line) {
  if (typeof dartPrint == "function") {
    dartPrint(line);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(line);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(line);
    return;
  }
  throw "Unable to print message: " + String(line);
},

Symbol_getName: function(symbol) {
  return symbol.get$_name();
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new H.ListIterator(this, this.get$length(this), 0, null);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    t3 = this._length;
    if (t3 == null ? $length != null : t3 !== $length)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw H.iae($length);
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null, $isEfficientLength: true},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  }
},

MappedListIterable: {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return J.get$length$asx(this._source);
  },
  elementAt$1: function(_, index) {
    return this._f$1(J.elementAt$1$ax(this._source, index));
  },
  $asListIterable: function($S, $T) {
    return [$T];
  },
  $isEfficientLength: true
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.WhereIterator(t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "WhereIterable", 0)]);
    return t1;
  },
  $asIterableBase: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  addAll$1: function(receiver, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  clear$0: function(receiver) {
    throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
  }
},

UnmodifiableListMixin: {"": "Object;",
  $indexSet: function(_, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
  },
  add$1: function(_, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addAll$1: function(_, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  clear$0: function(_) {
    throw H.wrapException(P.UnsupportedError$("Cannot clear an unmodifiable list"));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

UnmodifiableListBase: {"": "ListBase+UnmodifiableListMixin;", $asListBase: null, $asList: null, $isList: true, $isEfficientLength: true}}],
["dart.async", "dart:async", , P, {
_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  zone.toString;
  if (!!t1.$is_args2)
    return errorHandler;
  else
    return errorHandler;
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    t5.toString;
    result = new P._Future(0, t5, null, null, new P.Future_wait_closure(t1, pos), null, P._registerErrorHandler(null, t5), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    P._scheduleAsyncCallback(callback);
    return;
  }
  P._scheduleAsyncCallback(t1.bindCallback$2$runGuarded(callback, true));
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  } else {
    t1 = new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, e, s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  var t1 = $.Zone__current;
  t1.toString;
  P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
},

_nullDoneHandler: function() {
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(e, s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

Timer_Timer: function(duration, callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    return P._createTimer(duration, callback);
  }
  return P._createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$0();
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$1(arg);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$2(arg1, arg2);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$2(arg1, arg2);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

_BroadcastStream: {"": "_ControllerStream;_async$_controller", $as_ControllerStream: null},

_BroadcastSubscription: {"": "_ControllerSubscription;_eventState,_async$_next@,_async$_previous?,_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  get$_async$_controller: function() {
    return this._async$_controller;
  },
  _expectsEvent$1: function(eventId) {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 1) === eventId;
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_ControllerSubscription: null,
  static: {
"": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING",
}

},

_BroadcastStreamController: {"": "Object;_async$_next?,_async$_previous?",
  _ensureDoneFuture$0: function() {
    var t1 = this._doneFuture;
    if (t1 != null)
      return t1;
    t1 = P._Future$(null);
    this._doneFuture = t1;
    return t1;
  },
  _addListener$1: function(subscription) {
    subscription._async$_previous = this._async$_previous;
    subscription._async$_next = this;
    this._async$_previous.set$_async$_next(subscription);
    this._async$_previous = subscription;
    subscription._eventState = this._state & 1;
  },
  _removeListener$1: function(subscription) {
    var previous, next;
    previous = subscription._async$_previous;
    next = subscription._async$_next;
    previous.set$_async$_next(next);
    next.set$_async$_previous(previous);
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, t3, subscription;
    if ((this._state & 4) !== 0)
      throw H.wrapException(P.StateError$("Subscribing to closed stream"));
    t1 = H.getRuntimeTypeArgument(this, "_BroadcastStreamController", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(subscription, [t1]);
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
    this._addListener$1(subscription);
    t1 = this._async$_next;
    t2 = this._async$_previous;
    if (t1 == null ? t2 == null : t1 === t2)
      P._runGuarded(this._onListen);
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1;
    if (subscription.get$_async$_next() === subscription)
      return;
    t1 = subscription._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    if ((t1 & 2) !== 0)
      subscription._eventState = (t1 | 4) >>> 0;
    else {
      this._removeListener$1(subscription);
      if ((this._state & 2) === 0 && this._async$_next === this)
        this._callOnCancel$0();
    }
  },
  _recordPause$1: function(subscription) {
  },
  _recordResume$1: function(subscription) {
  },
  _addEventError$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add new events after calling close");
    return new P.StateError("Cannot add new events while doing an addStream");
  },
  add$1: function(_, data) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    this._sendData$1(data);
  },
  get$add: function(_receiver) {
    return new D.BoundClosure$i1(this, P._BroadcastStreamController.prototype.add$1, _receiver, "add$1");
  },
  addError$2: function(error, stackTrace) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    this._sendError$2(error, stackTrace);
  },
  get$addError: function() {
    return new P.BoundClosure$2(this, P._BroadcastStreamController.prototype.addError$2, null, "addError$2");
  },
  close$0: function(_) {
    var t1, doneFuture;
    t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._addEventError$0());
    this._state = (t1 | 4) >>> 0;
    doneFuture = this._ensureDoneFuture$0();
    this._sendDone$0();
    return doneFuture;
  },
  _async$_add$1: function(data) {
    this._sendData$1(data);
  },
  _addError$2: function(error, stackTrace) {
    this._sendError$2(error, stackTrace);
  },
  _close$0: function() {
    var addState = this._addStreamState;
    this._addStreamState = null;
    this._state = (this._state & 4294967287) >>> 0;
    C.JSNull_methods.complete$0(addState);
  },
  _forEachListener$1: function(action) {
    var t1, id, link, link0;
    t1 = this._state;
    if ((t1 & 2) !== 0)
      throw H.wrapException(P.StateError$("Cannot fire new event. Controller is already firing an event"));
    if (this._async$_next === this)
      return;
    id = t1 & 1;
    this._state = (t1 ^ 3) >>> 0;
    link = this._async$_next;
    for (; link !== this;)
      if (link._expectsEvent$1(id)) {
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$or();
        link._eventState = (t1 | 2) >>> 0;
        action.call$1(link);
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$xor();
        link._eventState = (t1 ^ 1) >>> 0;
        link0 = link._async$_next;
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$and();
        if ((t1 & 4) !== 0)
          this._removeListener$1(link);
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$and();
        link._eventState = (t1 & 4294967293) >>> 0;
        link = link0;
      } else
        link = link._async$_next;
    this._state = (this._state & 4294967293) >>> 0;
    if (this._async$_next === this)
      this._callOnCancel$0();
  },
  _callOnCancel$0: function() {
    if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
      this._doneFuture._asyncComplete$1(null);
    P._runGuarded(this._onCancel);
  }
},

_SyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
  },
  _sendError$2: function(error, stackTrace) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
  },
  _sendDone$0: function() {
    if (this._async$_next !== this)
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
    else
      this._doneFuture._asyncComplete$1(null);
  },
  $as_BroadcastStreamController: null
},

_SyncBroadcastStreamController__sendData_closure: {"": "Closure;this_0,data_1",
  call$1: function(subscription) {
    subscription._async$_add$1(this.data_1);
  },
  $is_args1: true
},

_SyncBroadcastStreamController__sendError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$1: function(subscription) {
    subscription._addError$2(this.error_1, this.stackTrace_2);
  },
  $is_args1: true
},

_SyncBroadcastStreamController__sendDone_closure: {"": "Closure;this_0",
  call$1: function(subscription) {
    subscription._close$0();
  },
  $is_args1: true
},

_AsyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    var link;
    for (link = this._async$_next; link !== this; link = link._async$_next)
      link._addPending$1(new P._DelayedData(data, null));
  },
  _sendError$2: function(error, stackTrace) {
    var link;
    for (link = this._async$_next; link !== this; link = link._async$_next)
      link._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    var link = this._async$_next;
    if (link !== this)
      for (; link !== this; link = link._async$_next)
        link._addPending$1(C.C__DelayedDone);
    else
      this._doneFuture._asyncComplete$1(null);
  },
  $as_BroadcastStreamController: null
},

Future: {"": "Object;", $isFuture: true},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
    return;
  },
  $is_args1: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  $is_args1: true
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future",
  completeError$2: function(error, stackTrace) {
    var t1;
    if (error == null)
      throw H.wrapException(new P.ArgumentError("Error must not be null"));
    t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(new P.StateError("Future already completed"));
    t1._asyncCompleteError$2(error, stackTrace);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  $as_Completer: null
},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  get$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4) {
      this._zone.toString;
      P._scheduleAsyncCallback(new P._Future__addListener_closure(this, listener));
    } else {
      listener._nextListener = this._resultOrListeners;
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current._nextListener = prev;
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners = this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  get$_completeError: function() {
    return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, onValueCallback, null, P._registerErrorHandler(onErrorCallback, t1), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  t1.toString;
  t2 = new P._Future(0, t1, null, null, null, errorTestCallback, t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, null, null, null, whenCompleteActionCallback);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target._state = 2;
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners._nextListener = null;
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    if (listeners == null)
      return;
    if (listeners._nextListener != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners._zone;
      t3.toString;
      t4.toString;
      t3 = t4 == null ? t3 != null : t4 !== t3;
    } else
      t3 = false;
    if (t3) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners._zone;
    if (t3 == null ? t4 != null : t3 !== t4) {
      t4.toString;
      P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t4.toString;
    P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners._state = 2;
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 4;
      listeners._resultOrListeners = t2;
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      t2 = J.get$error$x(asyncError);
      t3 = asyncError.get$stackTrace();
      listeners._state = 8;
      listeners._resultOrListeners = new P._AsyncError(t2, t3);
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  }
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  }
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  }
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_value();
        t2 = this.listener_5;
        t3 = t2._state === 2 ? null : t2._onValueCallback;
        t4 = this.box_1;
        if (t3 != null) {
          t4.listenerValueOrError_2 = t2._onValue$1(value);
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = value;
          t4.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2._state === 2 ? null : t2._errorTestCallback;
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        if (matchesTest === true)
          t3 = (t2._state === 2 ? null : t2._onErrorCallback) != null;
        else
          t3 = false;
        if (t3) {
          errorCallback = t2._state === 2 ? null : t2._onErrorCallback;
          t2 = this.box_1;
          t2.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t2.listenerHasValue_1 = true;
        } else {
          t2 = this.box_1;
          t2.listenerValueOrError_2 = asyncError;
          t2.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if ((t2._state === 2 ? null : t2._whenCompleteActionCallback) != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(e, s);
      this.box_1.listenerHasValue_1 = false;
    }

  }
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

Stream: {"": "Object;",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  }
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  }
},

StreamSubscription: {"": "Object;"},

_StreamController: {"": "Object;",
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var t1 = this._varData.get$varData();
    return t1;
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  add$1: function(_, value) {
    if (this._state >= 4)
      throw H.wrapException(this._badEventState$0());
    this._async$_add$1(value);
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  _async$_add$1: function(value) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedData(value, null));
    }
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendError$2(error, stackTrace);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedError(error, stackTrace, null));
    }
  },
  _close$0: function() {
    var addState = this._varData;
    this._varData = addState.get$varData();
    this._state = (this._state & 4294967287) >>> 0;
    addState.complete$0(addState);
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents, addState;
    if ((this._state & 3) !== 0)
      throw H.wrapException(new P.StateError("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.set$varData(subscription);
      addState.resume$0();
    } else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1, future;
    if ((this._state & 8) !== 0)
      this._varData.cancel$0();
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  },
  _recordPause$1: function(subscription) {
    var addState;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(this.get$_onPause());
  },
  _recordResume$1: function(subscription) {
    if ((this._state & 8) !== 0)
      this._varData.resume$0();
    P._runGuarded(this.get$_onResume());
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  }
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  }
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._async$_add$1(data);
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addError$2(error, stackTrace);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;"},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;"},

_ControllerStream: {"": "_StreamImpl;_async$_controller",
  _createSubscription$1: function(cancelOnError) {
    return this._async$_controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._async$_controller === this._async$_controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_async$_controller<,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this.get$_async$_controller()._recordCancel$1(this);
  },
  _onPause$0: function() {
    this.get$_async$_controller()._recordPause$1(this);
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    this.get$_async$_controller()._recordResume$1(this);
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    $.Zone__current.toString;
    this._async$_onData = handleData;
  },
  onError$1: function(_, handleError) {
    if (handleError == null)
      handleError = P._nullErrorHandler$closure;
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    if (handleDone == null)
      handleDone = P._nullDoneHandler$closure;
    $.Zone__current.toString;
    this._onDone = handleDone;
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else
      this._addPending$1(new P._DelayedData(data, null));
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendError$2(error, stackTrace);
    else
      this._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendError$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this._state;
    t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
    if ((t1 & 1) !== 0) {
      this._state = (t1 | 16) >>> 0;
      this._cancel$0();
      t1 = this._cancelFuture;
      t3 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t3.$isFuture)
        t1.whenComplete$1(t2);
      else
        t2.call$0();
    } else {
      t2.call$0();
      this._checkState$1((t1 & 4) !== 0);
    }
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 64) !== 0) {
      t2 = this._pending;
      t2 = t2.get$isEmpty(t2);
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendError_sendError: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 8) !== 0 && (t2 & 16) === 0)
      return;
    t1._state = (t2 | 32) >>> 0;
    t2 = t1._zone;
    t3 = $.Zone__current;
    t2.toString;
    t3.toString;
    if (t3 == null ? t2 != null : t3 !== t2)
      P._rootHandleUncaughtError(t3, null, t3, this.error_1, this.stackTrace_2);
    else {
      t3 = t1._onError;
      t4 = J.getInterceptor(t3);
      t5 = this.error_1;
      if (!!t4.$is_args2)
        t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
      else
        t2.runUnaryGuarded$2(t3, t5);
    }
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2, t3;
    t1 = H.getRuntimeTypeArgument(this, "_StreamImpl", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    t3 = new P._BufferingStreamSubscription(null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(t3, [t1]);
    return t3;
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value>,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedError: {"": "_DelayedEvent;error>,stackTrace<,next",
  perform$1: function(dispatch) {
    dispatch._sendError$2(this.error, this.stackTrace);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw H.wrapException(new P.StateError("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  }
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  $is_args2: true
},

_BaseZone: {"": "Object;",
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runBinaryGuarded$3: function(f, arg1, arg2) {
    var e, s, t1, exception;
    try {
      t1 = this.runBinary$3(f, arg1, arg2);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  }
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  }
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  $is_args1: true
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  }
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace, t2;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null) {
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
    } else
      t2 = false;
    if (t2)
      trace = t1.get$stackTrace();
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  }
},

_RootZone: {"": "_BaseZone;",
  $index: function(_, key) {
    return;
  },
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  runBinary$3: function(f, arg1, arg2) {
    return P._rootRunBinary(this, null, this, f, arg1, arg2);
  },
  registerCallback$1: function(f) {
    return f;
  },
  registerUnaryCallback$1: function(f) {
    return f;
  }
}}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
  var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._collection$_length = this._collection$_length + 1;
      this._keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  static: {
_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._map._collection$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell._collection$_value);
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_collection$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_collection$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key<,_collection$_value@,_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._map._collection$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var strings, table, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    }
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    rest = this._rest;
    if (rest == null)
      return false;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return false;
    this._collection$_length = this._collection$_length - 1;
    this._elements = null;
    bucket.splice(index, 1);
    return true;
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = 0;
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashSet: {"": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
    t1._cell = t1._set._first;
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_collection$_element());
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    }
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = this._newLinkedCell$1(element);
    return true;
  },
  _removeHashTableEntry$2: function(table, element) {
    var cell;
    if (table == null)
      return false;
    cell = table[element];
    if (cell == null)
      return false;
    this._unlinkCell$1(cell);
    delete table[element];
    return true;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new P.LinkedHashSetCell(element, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_collection$_element(), element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

LinkedHashSetCell: {"": "Object;_collection$_element<,_next@,_previous@"},

LinkedHashSetIterator: {"": "Object;_set,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_collection$_element();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

UnmodifiableListView: {"": "UnmodifiableListBase;_collection$_source",
  get$length: function(_) {
    return this._collection$_source.length;
  },
  $index: function(_, index) {
    var t1 = this._collection$_source;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $asUnmodifiableListBase: null,
  $asList: null
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    iterator = this.get$iterator(this);
    if (!iterator.moveNext$0())
      return "";
    buffer = P.StringBuffer$("");
    if (separator === "")
      do {
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0());
    else {
      buffer.write$1(H.S(iterator.get$current()));
      for (; iterator.moveNext$0();) {
        buffer._contents = buffer._contents + separator;
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer._contents;
  },
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return !this.get$iterator(this).moveNext$0();
  },
  get$isNotEmpty: function(_) {
    return !this.get$isEmpty(this);
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(new P.StateError("No elements"));
    return it.get$current();
  },
  get$single: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(new P.StateError("No elements"));
    result = it.get$current();
    if (it.moveNext$0())
      throw H.wrapException(new P.StateError("More than one element"));
    return result;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      if (typeof remaining !== "number")
        throw remaining.$sub();
      --remaining;
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  }
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  get$isNotEmpty: function(receiver) {
    return !this.get$isEmpty(receiver);
  },
  where$1: function(receiver, test) {
    var t1 = new H.WhereIterable(receiver, test);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = P.List_List(this.get$length(receiver), H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      throw t1.$add();
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  addAll$1: function(receiver, iterable) {
    var t1, element, t2;
    for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
      element = t1.get$current();
      t2 = this.get$length(receiver);
      if (typeof t2 !== "number")
        throw t2.$add();
      this.set$length(receiver, t2 + 1);
      this.$indexSet(receiver, t2, element);
    }
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    if (index < 0 || index > this.get$length(this))
      throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = t1.length;
    t3 = (this._head + index & t2 - 1) >>> 0;
    if (t3 < 0 || t3 >= t2)
      throw H.ioore(t1, t3);
    return t1[t3];
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $isEfficientLength: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._position = (this._position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue) {
  return new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
}}

}}],
["dart.core", "dart:core", , P, {
_symbolToString: function(symbol) {
  return H.Symbol_getName(symbol);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

List_List: function($length, $E) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + H.S($length) + "."));
  return H.Primitives_newFixedList($length);
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, i;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

print: function(object) {
  var line = J.toString$0(object);
  H.printToConsole(line);
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(P._symbolToString(key));
  },
  $is_args2: true
},

DateTime: {"": "Object;millisecondsSinceEpoch,isUtc",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDateTime)
      return false;
    return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new P.DateTime_toString_twoDigits();
    y = new P.DateTime_toString_fourDigits().call$1(H.Primitives_getYear(this));
    m = t1.call$1(H.Primitives_getMonth(this));
    d = t1.call$1(H.Primitives_getDay(this));
    h = t1.call$1(H.Primitives_getHours(this));
    min = t1.call$1(H.Primitives_getMinutes(this));
    sec = t1.call$1(H.Primitives_getSeconds(this));
    ms = new P.DateTime_toString_threeDigits().call$1(H.Primitives_getMilliseconds(this));
    if (this.isUtc)
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + "Z";
    else
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms);
  },
  add$1: function(_, duration) {
    return P.DateTime$fromMillisecondsSinceEpoch(C.JSNumber_methods.$add(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
  },
  DateTime$_now$0: function() {
    H.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
      throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
  },
  $isDateTime: true,
  static: {
"": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH",
DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

DateTime$_now: function() {
  var t1 = new P.DateTime(Date.now(), false);
  t1.DateTime$_now$0();
  return t1;
}}

},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var absN, sign;
    absN = J.abs$0$n(n);
    sign = n < 0 ? "-" : "";
    if (absN >= 1000)
      return H.S(n);
    if (absN >= 100)
      return sign + "0" + H.S(absN);
    if (absN >= 10)
      return sign + "00" + H.S(absN);
    return sign + "000" + H.S(absN);
  },
  $is_args1: true
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return H.S(n);
    if (t1.$ge(n, 10))
      return "0" + H.S(n);
    return "00" + H.S(n);
  },
  $is_args1: true
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return P.Duration$(0, 0, C.JSNumber_methods.$add(this._duration, other.get$_duration()), 0, 0, 0);
  },
  $sub: function(_, other) {
    return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $lt: function(_, other) {
    return C.JSNumber_methods.$lt(this._duration, other.get$_duration());
  },
  $gt: function(_, other) {
    return C.JSNumber_methods.$gt(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return C.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
}}

},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
  },
  $isError: true,
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  }
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + H.S(this.message);
  },
  static: {
FormatException$: function(message) {
  return new P.FormatException(message);
}}

},

Expando: {"": "Object;name>",
  toString$0: function(_) {
    return "Expando:" + H.S(this.name);
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;"},

Iterator: {"": "Object;"},

Map: {"": "Object;", $isMap: true},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  }
},

StackTrace: {"": "Object;"},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isNotEmpty: function(_) {
    return this._contents.length !== 0;
  },
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;"}}],
["dart.dom.html", "dart:html", , W, {
AnchorElement_AnchorElement: function(href) {
  var e = document.createElement("a", null);
  return e;
},

CustomEvent_CustomEvent: function(type, canBubble, cancelable, detail) {
  var e, t1, t2, exception;
  e = document.createEvent("CustomEvent");
  J.set$_dartDetail$x(e, detail);
  t1 = detail;
  t2 = J.getInterceptor(t1);
  if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t2.$isList) {
    t1 = detail;
    t2 = J.getInterceptor(t1);
    if (typeof t1 !== "object" || t1 === null || !t2.$isMap) {
      t1 = detail;
      if (typeof t1 !== "string") {
        t1 = detail;
        t1 = typeof t1 === "number";
      } else
        t1 = true;
    } else
      t1 = true;
  } else
    t1 = true;
  if (t1)
    try {
      detail = P._convertDartToNative_PrepareForStructuredClone(detail);
      J._initCustomEvent$4$x(e, type, canBubble, cancelable, detail);
    } catch (exception) {
      H.unwrapException(exception);
      J._initCustomEvent$4$x(e, type, canBubble, cancelable, null);
    }

  else
    J._initCustomEvent$4$x(e, type, canBubble, cancelable, null);
  return e;
},

Element_Element$html: function(html, treeSanitizer, validator) {
  var fragment, t1;
  fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
  fragment.toString;
  t1 = new W._ChildNodeListLazy(fragment);
  t1 = t1.where$1(t1, new W.Element_Element$html_closure());
  return t1.get$single(t1);
},

InputElement_InputElement: function(type) {
  var e, exception;
  e = document.createElement("input", null);
  if (type != null)
    try {
      J.set$type$x(e, type);
    } catch (exception) {
      H.unwrapException(exception);
    }

  return e;
},

OptionElement_OptionElement$_: function(data, value, defaultSelected, selected) {
  return new Option(data, value, defaultSelected, selected);
},

Window__isDartLocation: function(thing) {
  var t1, t2, exception;
  try {
    t1 = thing;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
  } catch (exception) {
    H.unwrapException(exception);
    return false;
  }

},

_JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

_convertNativeToDart_EventTarget: function(e) {
  var $window, t1;
  if (e == null)
    return;
  if ("setInterval" in e) {
    $window = W._DOMWindowCrossFrame__createSafe(e);
    t1 = J.getInterceptor($window);
    if (typeof $window === "object" && $window !== null && !!t1.$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

_wrapZone: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone)
    return callback;
  return t1.bindUnaryCallback$2$runGuarded(callback, true);
},

HtmlElement: {"": "Element;", $isHtmlElement: true, "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLImageElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"},

AnchorElement: {"": "HtmlElement;hostname=,href},port=,protocol=,target=,type}",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

AreaElement: {"": "HtmlElement;hostname=,href},port=,protocol=,target=", "%": "HTMLAreaElement"},

BaseElement: {"": "HtmlElement;href},target=", "%": "HTMLBaseElement"},

BodyElement: {"": "HtmlElement;", $isBodyElement: true, "%": "HTMLBodyElement"},

ButtonElement: {"": "HtmlElement;name=,type},value%", "%": "HTMLButtonElement"},

CharacterData: {"": "Node;length=", "%": "CDATASection|Comment|Text;CharacterData"},

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      H.unwrapException(exception);
    }

  },
  "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
},

CustomEvent: {"": "Event;_dartDetail}",
  get$detail: function(receiver) {
    var t1 = receiver._dartDetail;
    if (t1 != null)
      return t1;
    return P.convertNativeToDart_AcceptStructuredClone(receiver.detail, true);
  },
  _initCustomEvent$4: function(receiver, typeArg, canBubbleArg, cancelableArg, detailArg) {
    return receiver.initCustomEvent(typeArg, canBubbleArg, cancelableArg, detailArg);
  },
  "%": "CustomEvent"
},

DataListElement: {"": "HtmlElement;options=", "%": "HTMLDataListElement"},

DivElement: {"": "HtmlElement;", "%": "HTMLDivElement"},

Document: {"": "Node;",
  querySelector$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  querySelectorAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  "%": "Document|HTMLDocument|SVGDocument"
},

DocumentFragment: {"": "Node;",
  get$children: function(receiver) {
    var t1;
    if (receiver._children == null) {
      t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
      H.setRuntimeTypeInfo(t1, [null]);
      receiver._children = t1;
    }
    return receiver._children;
  },
  querySelectorAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  querySelector$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  "%": "DocumentFragment|ShadowRoot"
},

DomError: {"": "Interceptor;name=", "%": "DOMError|FileError"},

DomException: {"": "Interceptor;",
  get$name: function(receiver) {
    var errorName = receiver.name;
    if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

Element: {"": "Node;className%,id=",
  get$attributes: function(receiver) {
    return new W._ElementAttributeMap(receiver);
  },
  get$children: function(receiver) {
    return new W._ChildrenElementList(receiver, receiver.children);
  },
  querySelectorAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  get$classes: function(receiver) {
    return new W._ElementCssClassSet(receiver);
  },
  get$client: function(receiver) {
    var t1 = new P.Rectangle(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  insertAdjacentHtml$2: function(receiver, where, html) {
    if (!!receiver.insertAdjacentHTML)
      receiver.insertAdjacentHTML(where, html);
    else
      this._insertAdjacentNode$2(receiver, where, J.createFragment$3$treeSanitizer$validator$x(document.body, html, null, null));
  },
  _insertAdjacentNode$2: function(receiver, where, node) {
    var t1, first;
    switch (where.toLowerCase()) {
      case "beforebegin":
        receiver.parentNode.insertBefore(node, receiver);
        break;
      case "afterbegin":
        if (new W._ChildNodeListLazy(receiver)._this.childNodes.length > 0) {
          t1 = new W._ChildNodeListLazy(receiver)._this.childNodes;
          if (0 >= t1.length)
            throw H.ioore(t1, 0);
          first = t1[0];
        } else
          first = null;
        receiver.insertBefore(node, first);
        break;
      case "beforeend":
        receiver.appendChild(node);
        break;
      case "afterend":
        receiver.parentNode.insertBefore(node, receiver.nextSibling);
        break;
      default:
        throw H.wrapException(new P.ArgumentError("Invalid position " + where));
    }
  },
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var t1, t2, base, contextElement, fragment;
    if (treeSanitizer == null) {
      if ($.Element__defaultValidator == null) {
        t1 = [];
        H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
        t1 = new W.NodeValidatorBuilder(t1);
        t2 = t1._validators;
        t2.push(W._Html5NodeValidator$(null));
        t2.push(W._TemplatingNodeValidator$());
        $.Element__defaultValidator = t1;
      }
      validator = $.Element__defaultValidator;
      t1 = $.Element__defaultSanitizer;
      if (t1 == null)
        $.Element__defaultSanitizer = new W._ValidatingTreeSanitizer(validator);
      else
        t1.validator = validator;
      treeSanitizer = $.Element__defaultSanitizer;
    }
    if ($.Element__parseDocument == null) {
      $.Element__parseDocument = document.implementation.createHTMLDocument("");
      $.Element__parseRange = $.Element__parseDocument.createRange();
      base = $.Element__parseDocument.createElement("base", null);
      J.set$href$x(base, document.baseURI);
      $.Element__parseDocument.head.appendChild(base);
    }
    t1 = $.Element__parseDocument;
    if (!!this.$isBodyElement)
      contextElement = t1.body;
    else {
      contextElement = t1.createElement(receiver.tagName, null);
      $.Element__parseDocument.body.appendChild(contextElement);
    }
    if ("createContextualFragment" in window.Range.prototype) {
      $.Element__parseRange.selectNodeContents(contextElement);
      fragment = $.Element__parseRange.createContextualFragment(html);
    } else {
      contextElement.innerHTML = html;
      fragment = $.Element__parseDocument.createDocumentFragment();
      for (; t1 = contextElement.firstChild, t1 != null;)
        fragment.appendChild(t1);
    }
    t1 = $.Element__parseDocument.body;
    if (contextElement == null ? t1 != null : contextElement !== t1)
      J.remove$0$ax(contextElement);
    treeSanitizer.sanitizeTree$1(fragment);
    document.adoptNode(fragment);
    return fragment;
  },
  createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  set$innerHtml: function(receiver, html) {
    this.setInnerHtml$1(receiver, html);
  },
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  get$on: function(receiver) {
    return new W.ElementEvents(receiver, receiver);
  },
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  querySelector$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  $isElement: true,
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;name=,type}", "%": "HTMLEmbedElement"},

ErrorEvent: {"": "Event;error=", "%": "ErrorEvent"},

Event: {"": "Interceptor;",
  get$target: function(receiver) {
    return W._convertNativeToDart_EventTarget(receiver.target);
  },
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  },
  "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"
},

EventTarget: {"": "Interceptor;",
  get$on: function(receiver) {
    return new W.Events(receiver);
  },
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isEventTarget: true,
  "%": "MediaStream;EventTarget"
},

FieldSetElement: {"": "HtmlElement;name=", "%": "HTMLFieldSetElement"},

FormElement: {"": "HtmlElement;length=,name=,target=", "%": "HTMLFormElement"},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
},

IFrameElement: {"": "HtmlElement;name=", "%": "HTMLIFrameElement"},

InputElement: {"": "HtmlElement;name=,placeholder},type},value%", $isElement: true, $isEventTarget: true, "%": "HTMLInputElement"},

KeyboardEvent: {"": "UIEvent;",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  "%": "KeyboardEvent"
},

KeygenElement: {"": "HtmlElement;name=", "%": "HTMLKeygenElement"},

LIElement: {"": "HtmlElement;value%", $isLIElement: true, "%": "HTMLLIElement"},

LabelElement: {"": "HtmlElement;htmlFor}", "%": "HTMLLabelElement"},

LinkElement: {"": "HtmlElement;href},type}", "%": "HTMLLinkElement"},

Location: {"": "Interceptor;hostname=,port=,protocol=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  "%": "Location"
},

MapElement: {"": "HtmlElement;name=", "%": "HTMLMapElement"},

MediaElement: {"": "HtmlElement;error=", "%": "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement"},

MetaElement: {"": "HtmlElement;name=", "%": "HTMLMetaElement"},

MeterElement: {"": "HtmlElement;value%", "%": "HTMLMeterElement"},

MidiOutput: {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send(data, timestamp);
  },
  send$1: function($receiver, data) {
    return $receiver.send(data);
  },
  "%": "MIDIOutput"
},

MidiPort: {"": "EventTarget;name=", "%": "MIDIInput;MIDIPort"},

MouseEvent: {"": "UIEvent;dataTransfer=",
  get$client: function(receiver) {
    var t1 = new P.Point(receiver.clientX, receiver.clientY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  get$offset: function(receiver) {
    var t1, t2, target, point;
    if (!!receiver.offsetX) {
      t1 = new P.Point(receiver.offsetX, receiver.offsetY);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    } else {
      t1 = W._convertNativeToDart_EventTarget(receiver.target);
      t2 = J.getInterceptor(t1);
      if (typeof t1 !== "object" || t1 === null || !t2.$isElement)
        throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
      target = W._convertNativeToDart_EventTarget(receiver.target);
      t1 = new P.Point(receiver.clientX, receiver.clientY);
      H.setRuntimeTypeInfo(t1, [null]);
      point = t1.$sub(t1, J.get$topLeft$x(J.getBoundingClientRect$0$x(target)));
      t1 = new P.Point(J.toInt$0$n(point.x), J.toInt$0$n(point.y));
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    }
  },
  "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
},

NavigatorUserMediaError: {"": "Interceptor;name=", "%": "NavigatorUserMediaError"},

Node: {"": "EventTarget;lastChild=,nodeType=,text:textContent%",
  get$nodes: function(receiver) {
    return new W._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      J._replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      H.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  _replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  "%": "DocumentType|Entity|Notation;Node"
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "NodeList|RadioNodeList"
},

OListElement: {"": "HtmlElement;type}", "%": "HTMLOListElement"},

ObjectElement: {"": "HtmlElement;name=,type}", "%": "HTMLObjectElement"},

OptionElement: {"": "HtmlElement;value%", $isOptionElement: true, "%": "HTMLOptionElement"},

OutputElement: {"": "HtmlElement;name=,value%", "%": "HTMLOutputElement"},

ParamElement: {"": "HtmlElement;name=,value%", "%": "HTMLParamElement"},

ProcessingInstruction: {"": "CharacterData;target=", "%": "ProcessingInstruction"},

ProgressElement: {"": "HtmlElement;value%", "%": "HTMLProgressElement"},

Range: {"": "Interceptor;",
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "Range"
},

ScriptElement0: {"": "HtmlElement;type}", "%": "HTMLScriptElement"},

SelectElement: {"": "HtmlElement;length=,name=,selectedIndex=,value%",
  get$options: function(receiver) {
    var t1 = W._FrozenElementList$_wrap(receiver.querySelectorAll("option"), null);
    t1 = t1.where$1(t1, new W.SelectElement_options_closure());
    t1 = new P.UnmodifiableListView(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)));
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  $isSelectElement: true,
  "%": "HTMLSelectElement"
},

SourceElement: {"": "HtmlElement;type}", "%": "HTMLSourceElement"},

SpanElement: {"": "HtmlElement;", $isSpanElement: true, "%": "HTMLSpanElement"},

SpeechRecognitionError: {"": "Event;error=", "%": "SpeechRecognitionError"},

SpeechSynthesisEvent: {"": "Event;name=", "%": "SpeechSynthesisEvent"},

StyleElement: {"": "HtmlElement;type}", "%": "HTMLStyleElement"},

TableElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var table, fragment, t1;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1.addAll$1(t1, J.get$nodes$x(table));
    return fragment;
  },
  "%": "HTMLTableElement"
},

TableRowElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section, row;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    section.toString;
    t1 = new W._ChildNodeListLazy(section);
    row = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    row.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(row));
    return fragment;
  },
  "%": "HTMLTableRowElement"
},

TableSectionElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    section.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(section));
    return fragment;
  },
  "%": "HTMLTableSectionElement"
},

TemplateElement: {"": "HtmlElement;",
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment;
    receiver.textContent = null;
    fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
    receiver.content.appendChild(fragment);
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  $isTemplateElement: true,
  "%": "HTMLTemplateElement"
},

TextAreaElement: {"": "HtmlElement;name=,placeholder},value%", $isTextAreaElement: true, "%": "HTMLTextAreaElement"},

UIEvent: {"": "Event;detail=", "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent|TouchEvent;UIEvent"},

Window: {"": "EventTarget;name=",
  get$location: function(receiver) {
    var result = receiver.location;
    if (W.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = new W._LocationWrapper(result);
    return receiver._location_wrapper;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isEventTarget: true,
  "%": "DOMWindow|Window"
},

_Attr: {"": "Node;name=,value=", "%": "Attr"},

_ClientRect: {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(receiver.left);
    t2 = J.get$hashCode$(receiver.top);
    t3 = J.get$hashCode$(receiver.width);
    t4 = J.get$hashCode$(receiver.height);
    return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  get$topLeft: function(receiver) {
    var t1 = new P.Point(receiver.left, receiver.top);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  $isRectangle: true,
  $asRectangle: function() {
    return [null];
  },
  "%": "ClientRect|DOMRect"
},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MozNamedAttrMap|NamedNodeMap"
},

Console: {"": "Object;",
  error$1: function(_, arg) {
    return typeof console != "undefined" ? console.error(arg) : null;
  },
  get$error: function(_receiver) {
    return new D.BoundClosure$i1(this, W.Console.prototype.error$1, _receiver, "error$1");
  },
  group$1: function(arg) {
    return typeof console != "undefined" ? console.group(arg) : null;
  },
  get$group: function() {
    return new H.BoundClosure$1(this, W.Console.prototype.group$1, null, "group$1");
  },
  static: {
"": "Console__safeConsole",
}

},

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;"},

CssStyleDeclarationBase: {"": "Object;",
  set$cursor: function(receiver, value) {
    this.setProperty$3(receiver, "cursor", value, "");
  },
  get$display: function(receiver) {
    return this.getPropertyValue$1(receiver, "display");
  },
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  }
},

_ChildrenElementList: {"": "ListBase;_element,_childElements",
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    var t1 = this.toList$0(this);
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = J.get$iterator$ax(iterable), t2 = this._element; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  remove$1: function(_, object) {
    var t1 = J.getInterceptor(object);
    if (typeof object === "object" && object !== null && !!t1.$isElement) {
      t1 = this._element;
      if (object.parentNode === t1) {
        t1.removeChild(object);
        return true;
      }
    }
    return false;
  },
  insert$2: function(_, index, element) {
    var t1, t2, t3;
    if (index < 0 || index > this._childElements.length)
      throw H.wrapException(P.RangeError$range(index, 0, this._childElements.length));
    t1 = this._childElements;
    t2 = t1.length;
    t3 = this._element;
    if (index === t2)
      t3.appendChild(element);
    else {
      if (index < 0 || index >= t2)
        throw H.ioore(t1, index);
      t3.insertBefore(element, t1[index]);
    }
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  $asList: function() {
    return [W.Element];
  }
},

_FrozenElementList: {"": "ListBase;_nodeList,_elementList",
  get$length: function(_) {
    return this._nodeList.length;
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
  },
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
  },
  _html$_FrozenElementList$_wrap$1: function(_nodeList, $T) {
    var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
    this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
  },
  $asListBase: null,
  $asList: null,
  $isList: true,
  $isEfficientLength: true,
  static: {
_FrozenElementList$_wrap: function(_nodeList, $T) {
  var t1 = new W._FrozenElementList(_nodeList, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
  return t1;
}}

},

_FrozenElementList$_wrap_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  $is_args1: true
},

Element_Element$html_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  $is_args1: true
},

Events: {"": "Object;_ptr<",
  $index: function(_, type) {
    var t1 = new W._EventStream(this.get$_ptr(), type, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  }
},

ElementEvents: {"": "Events;_ptr<,html$Events$_ptr",
  $index: function(_, type) {
    var t1;
    if ($.get$ElementEvents_webkitEvents().get$keys()._map.containsKey$1(J.toLowerCase$0$s(type)))
      if (P.Device_isWebKit() === true) {
        t1 = $.get$ElementEvents_webkitEvents();
        t1 = new W._ElementEventStreamImpl(this._ptr, t1.$index(t1, type.toLowerCase()), false);
        H.setRuntimeTypeInfo(t1, [null]);
        return t1;
      }
    t1 = new W._ElementEventStreamImpl(this._ptr, type, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  static: {
"": "ElementEvents_webkitEvents",
}

},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_ChildNodeListLazy: {"": "ListBase;_this",
  get$single: function(_) {
    var t1, l;
    t1 = this._this;
    l = t1.childNodes.length;
    if (l === 0)
      throw H.wrapException(new P.StateError("No elements"));
    if (l > 1)
      throw H.wrapException(new P.StateError("More than one element"));
    return t1.firstChild;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i;
    t1 = J.getInterceptor$ax(iterable);
    if (typeof iterable === "object" && iterable !== null && !!t1.$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    }
    for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  insert$2: function(_, index, node) {
    var t1, t2, t3;
    if (index < 0 || index > this._this.childNodes.length)
      throw H.wrapException(P.RangeError$range(index, 0, this._this.childNodes.length));
    t1 = this._this;
    t2 = t1.childNodes;
    t3 = t2.length;
    if (index === t3)
      t1.appendChild(node);
    else {
      if (index < 0 || index >= t3)
        throw H.ioore(t2, index);
      t1.insertBefore(node, t2[index]);
    }
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $is_ChildNodeListLazy: true,
  $asList: function() {
    return [W.Node];
  }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

SelectElement_options_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isOptionElement;
  },
  $is_args1: true
},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_AttributeMap: {"": "Object;",
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      key = t1._current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push(J.get$name$x(t1));
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push(J.get$value$x(t1));
    }
    return values;
  },
  get$isNotEmpty: function(_) {
    return this.get$length(this) !== 0;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

_DataAttributeMap: {"": "Object;_attributes",
  $index: function(_, key) {
    return this._attributes._element.getAttribute("data-" + this._toHyphenedName$1(key));
  },
  $indexSet: function(_, key, value) {
    this._attributes._element.setAttribute("data-" + this._toHyphenedName$1(key), value);
  },
  forEach$1: function(_, f) {
    var t1 = this._attributes;
    t1.forEach$1(t1, new W._DataAttributeMap_forEach_closure(this, f));
  },
  get$keys: function() {
    var keys, t1;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    t1 = this._attributes;
    t1.forEach$1(t1, new W._DataAttributeMap_keys_closure(this, keys));
    return keys;
  },
  get$values: function(_) {
    var values, t1;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    t1 = this._attributes;
    t1.forEach$1(t1, new W._DataAttributeMap_values_closure(this, values));
    return values;
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  get$isNotEmpty: function(_) {
    return this.get$keys().length !== 0;
  },
  _toCamelCase$2$startUppercase: function(hyphenedName, startUppercase) {
    var segments, start, i, segment, t1, t2;
    segments = hyphenedName.split("-");
    start = startUppercase ? 0 : 1;
    for (i = start; i < segments.length; ++i) {
      segment = segments[i];
      t1 = J.getInterceptor$asx(segment);
      t2 = t1.get$length(segment);
      if (typeof t2 !== "number")
        throw t2.$gt();
      if (t2 > 0) {
        t1 = J.toUpperCase$0$s(t1.$index(segment, 0)) + t1.substring$1(segment, 1);
        if (i >= segments.length)
          throw H.ioore(segments, i);
        segments[i] = t1;
      }
    }
    return C.JSArray_methods.join$1(segments, "");
  },
  _toCamelCase$1: function(hyphenedName) {
    return this._toCamelCase$2$startUppercase(hyphenedName, false);
  },
  _toHyphenedName$1: function(word) {
    var sb, t1, i, t2, lower;
    sb = P.StringBuffer$("");
    t1 = J.getInterceptor$asx(word);
    i = 0;
    while (true) {
      t2 = t1.get$length(word);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (!(i < t2))
        break;
      lower = J.toLowerCase$0$s(t1.$index(word, i));
      if (!J.$eq(t1.$index(word, i), lower) && i > 0)
        sb._contents = sb._contents + "-";
      sb._contents = sb._contents + lower;
      ++i;
    }
    return sb._contents;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

_DataAttributeMap_forEach_closure: {"": "Closure;this_0,f_1",
  call$2: function(key, value) {
    if (J.getInterceptor$s(key).startsWith$1(key, "data-"))
      this.f_1.call$2(this.this_0._toCamelCase$1(C.JSString_methods.substring$1(key, 5)), value);
  },
  $is_args2: true
},

_DataAttributeMap_keys_closure: {"": "Closure;this_0,keys_1",
  call$2: function(key, value) {
    if (J.getInterceptor$s(key).startsWith$1(key, "data-"))
      this.keys_1.push(this.this_0._toCamelCase$1(C.JSString_methods.substring$1(key, 5)));
  },
  $is_args2: true
},

_DataAttributeMap_values_closure: {"": "Closure;this_0,values_1",
  call$2: function(key, value) {
    if (J.startsWith$1$s(key, "data-"))
      this.values_1.push(value);
  },
  $is_args2: true
},

_ElementCssClassSet: {"": "CssClassSetImpl;_element",
  readClasses$0: function() {
    var s, t1, trimmed;
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    for (t1 = J.get$className$x(this._element).split(" "), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      trimmed = J.trim$0$s(t1._current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    P.List_List$from(s, true, null);
    J.set$className$x(this._element, s.join$1(s, " "));
  }
},

EventStreamProvider: {"": "Object;_eventType"},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_target,_eventType,_useCapture", $as_EventStream: null},

_ElementListEventStreamImpl: {"": "Stream;_targetList,_useCapture,_eventType",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var pool, t1, t2, t3, t4;
    pool = W._StreamPool$broadcast(null);
    for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType, t3 = this._useCapture; t1.moveNext$0();) {
      t4 = new W._EventStream(t1._current, t2, t3);
      t4.$builtinTypeInfo = [null];
      pool.add$1(pool, t4);
    }
    t1 = pool._html$_controller;
    t1.toString;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
    return t2.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  $asStream: null
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._target == null)
      return;
    this._unlisten$0();
    this._target = null;
    this._onData = null;
  },
  resume$0: function() {
    if (this._target == null || this._pauseCount <= 0)
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

_StreamPool: {"": "Object;_html$_controller,_subscriptions",
  add$1: function(_, stream) {
    var t1, t2;
    t1 = this._subscriptions;
    if (t1.containsKey$1(stream))
      return;
    t2 = this._html$_controller;
    t1.$indexSet(t1, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), t2.get$addError()));
  },
  remove$1: function(_, stream) {
    var t1, subscription;
    t1 = this._subscriptions;
    subscription = t1.remove$1(t1, stream);
    if (subscription != null)
      subscription.cancel$0();
  },
  close$0: function(_) {
    var t1, t2, t3;
    for (t1 = this._subscriptions, t2 = t1.get$values(t1), t3 = t2._iterable, t3 = t3.get$iterator(t3), t3 = new H.MappedIterator(null, t3, t2._f), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "MappedIterable", 0), H.getRuntimeTypeArgument(t2, "MappedIterable", 1)]); t3.moveNext$0();)
      t3._current.cancel$0();
    t1.clear$0(t1);
    t1 = this._html$_controller;
    t1.close$0(t1);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, W._StreamPool.prototype.close$0, _receiver, "close$0");
  },
  _html$_StreamPool$broadcast$0: function($T) {
    this._html$_controller = P.StreamController_StreamController$broadcast(this.get$close(this), null, true, $T);
  },
  static: {
_StreamPool$broadcast: function($T) {
  var t1 = new W._StreamPool(null, P.LinkedHashMap_LinkedHashMap(null, null, null, [P.Stream, $T], [P.StreamSubscription, $T]));
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._html$_StreamPool$broadcast$0($T);
  return t1;
}}

},

_StreamPool_add_closure: {"": "Closure;this_0,stream_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.remove$1(t1, this.stream_1);
  }
},

_Html5NodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = $.get$_Html5NodeValidator__allowedElements();
    return t1.contains$1(t1, element.tagName);
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1, validator;
    tagName = element.tagName;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    validator = t1.$index(t1, tagName + "::" + attributeName);
    if (validator == null) {
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(t1, "*::" + attributeName);
    }
    if (validator == null)
      return false;
    return validator.call$4(element, attributeName, value, this);
  },
  _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
    var t1, attr, t2;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    if (t1.get$isEmpty(t1)) {
      for (t1 = new H.ListIterator(C.List_1GN, 261, 0, null); t1.moveNext$0();) {
        attr = t1._current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__standardAttributeValidator$closure);
      }
      for (t1 = new H.ListIterator(C.List_yrN, 12, 0, null); t1.moveNext$0();) {
        attr = t1._current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__uriAttributeValidator$closure);
      }
    }
  },
  static: {
"": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators",
_Html5NodeValidator$: function(uriPolicy) {
  var t1 = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
  t1 = new W._Html5NodeValidator(t1);
  t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
  return t1;
},

_Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
  return true;
},

_Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
  return context.get$uriPolicy().allowsUri$1(value);
}}

},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver);
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

NodeValidatorBuilder: {"": "Object;_validators",
  add$1: function(_, validator) {
    this._validators.push(validator);
  },
  allowsElement$1: function(element) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
  },
  allowsAttribute$3: function(element, attributeName, value) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
  }
},

NodeValidatorBuilder_allowsElement_closure: {"": "Closure;element_0",
  call$1: function(v) {
    return v.allowsElement$1(this.element_0);
  },
  $is_args1: true
},

NodeValidatorBuilder_allowsAttribute_closure: {"": "Closure;element_0,attributeName_1,value_2",
  call$1: function(v) {
    return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
  },
  $is_args1: true
},

_SimpleNodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = this.allowedElements;
    return t1.contains$1(t1, element.tagName);
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1;
    tagName = element.tagName;
    t1 = this.allowedUriAttributes;
    if (t1.contains$1(t1, tagName + "::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else if (t1.contains$1(t1, "*::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else {
      t1 = this.allowedAttributes;
      if (t1.contains$1(t1, tagName + "::" + attributeName))
        return true;
      else if (t1.contains$1(t1, "*::" + attributeName))
        return true;
      else if (t1.contains$1(t1, tagName + "::*"))
        return true;
      else if (t1.contains$1(t1, "*::*"))
        return true;
    }
    return false;
  }
},

_TemplatingNodeValidator: {"": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
  allowsAttribute$3: function(element, attributeName, value) {
    var t1;
    if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
      return true;
    if (attributeName === "template" && value === "")
      return true;
    if (new W._ElementAttributeMap(element)._element.getAttribute("template") === "") {
      t1 = this._templateAttrs;
      return t1.contains$1(t1, attributeName);
    }
    return false;
  },
  static: {
"": "_TemplatingNodeValidator__TEMPLATE_ATTRS",
_TemplatingNodeValidator$: function() {
  var t1, t2, t3, t4;
  t1 = new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t2.addAll$1(t2, ["TEMPLATE"]);
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t3.addAll$1(t3, t1);
  t1 = t3;
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
  t4.addAll$1(t4, C.List_wSV);
  return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
}}

},

_TemplatingNodeValidator_closure: {"": "Closure;",
  call$1: function(attr) {
    return "TEMPLATE::" + H.S(attr);
  },
  $is_args1: true
},

_SvgNodeValidator: {"": "Object;",
  allowsElement$1: function(element) {
    var t1 = J.getInterceptor(element);
    if (!!t1.$isScriptElement)
      return false;
    if (!!t1.$isSvgElement)
      return true;
    return false;
  },
  allowsAttribute$3: function(element, attributeName, value) {
    if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
      return false;
    return this.allowsElement$1(element);
  }
},

FixedSizeListIterator: {"": "Object;_array,_html$_length,_html$_position,_html$_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._html$_position;
    if (typeof t1 !== "number")
      throw t1.$add();
    nextPosition = t1 + 1;
    t1 = this._html$_length;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (nextPosition < t1) {
      this._html$_current = J.$index$asx(this._array, nextPosition);
      this._html$_position = nextPosition;
      return true;
    }
    this._html$_current = null;
    this._html$_position = t1;
    return false;
  },
  get$current: function() {
    return this._html$_current;
  },
  static: {
FixedSizeListIterator$: function(array) {
  return new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
}}

},

_DOMWindowCrossFrame: {"": "Object;_window", $isEventTarget: true, static: {
_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new W._DOMWindowCrossFrame(w);
}}
},

_LocationWrapper: {"": "Object;_ptr",
  get$hostname: function(_) {
    return this._ptr.hostname;
  },
  get$port: function(_) {
    return this._ptr.port;
  },
  get$protocol: function(_) {
    return this._ptr.protocol;
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true
},

NodeValidator: {"": "Object;"},

_SameOriginUriPolicy: {"": "Object;_hiddenAnchor,_loc",
  allowsUri$1: function(uri) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._hiddenAnchor;
    t2 = J.getInterceptor$x(t1);
    t2.set$href(t1, uri);
    t3 = t2.get$hostname(t1);
    t4 = this._loc;
    t5 = J.getInterceptor$x(t4);
    t6 = t5.get$hostname(t4);
    if (t3 == null ? t6 == null : t3 === t6) {
      t3 = t2.get$port(t1);
      t6 = t5.get$port(t4);
      if (t3 == null ? t6 == null : t3 === t6) {
        t3 = t2.get$protocol(t1);
        t4 = t5.get$protocol(t4);
        t4 = t3 == null ? t4 == null : t3 === t4;
        t3 = t4;
      } else
        t3 = false;
    } else
      t3 = false;
    if (!t3)
      t1 = t2.get$hostname(t1) === "" && t2.get$port(t1) === "" && t2.get$protocol(t1) === ":";
    else
      t1 = true;
    return t1;
  }
},

_ValidatingTreeSanitizer: {"": "Object;validator",
  sanitizeTree$1: function(node) {
    new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
  },
  sanitizeNode$1: function(node) {
    var t1, attrs, t2, t3, isAttr, keys, i, $name, t4;
    t1 = J.getInterceptor$x(node);
    switch (t1.get$nodeType(node)) {
      case 1:
        attrs = t1.get$attributes(node);
        if (!this.validator.allowsElement$1(node)) {
          window;
          t2 = $.get$Console__safeConsole();
          t3 = "Removing disallowed element <" + node.tagName + ">";
          t2.toString;
          if (typeof console != "undefined")
            console.warn(t3);
          t1.remove$0(node);
          break;
        }
        t2 = attrs._element;
        isAttr = t2.getAttribute("is");
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
            window;
            t2 = $.get$Console__safeConsole();
            t3 = "Removing disallowed type extension <" + node.tagName + " is=\"" + isAttr + "\">";
            t2.toString;
            if (typeof console != "undefined")
              console.warn(t3);
            t1.remove$0(node);
            break;
          }
        t3 = attrs.get$keys();
        keys = P.List_List$from(t3, true, H.getRuntimeTypeArgument(t3, "JSArray", 0));
        for (i = attrs.get$keys().length - 1; i >= 0; --i) {
          if (i >= keys.length)
            throw H.ioore(keys, i);
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
            window;
            t3 = $.get$Console__safeConsole();
            t4 = "Removing disallowed attribute <" + node.tagName + " " + $name + "=\"" + t2.getAttribute($name) + "\">";
            t3.toString;
            if (typeof console != "undefined")
              console.warn(t4);
            t2.getAttribute($name);
            t2.removeAttribute($name);
          }
        }
        if (typeof node === "object" && node !== null && !!t1.$isTemplateElement)
          this.sanitizeTree$1(node.content);
        break;
      case 8:
      case 11:
      case 3:
      case 4:
        break;
      default:
        t1.remove$0(node);
    }
  }
},

_ValidatingTreeSanitizer_sanitizeTree_walk: {"": "Closure;this_0",
  call$1: function(node) {
    var child, nextChild;
    this.this_0.sanitizeNode$1(node);
    child = J.get$lastChild$x(node);
    for (; child != null; child = nextChild) {
      nextChild = child.previousSibling;
      this.call$1(child);
    }
  },
  $is_args1: true
}}],
["dart.dom.svg", "dart:svg", , P, {
AElement: {"": "GraphicsElement;target=", "%": "SVGAElement"},

GraphicsElement: {"": "SvgElement;",
  getCtm$0: function(receiver) {
    return receiver.getCTM();
  },
  getScreenCtm$0: function(receiver) {
    return receiver.getScreenCTM();
  },
  "%": "SVGAltGlyphElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGForeignObjectElement|SVGGElement|SVGImageElement|SVGLineElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSwitchElement|SVGTSpanElement|SVGTextContentElement|SVGTextElement|SVGTextPathElement|SVGTextPositioningElement|SVGUseElement;SVGGraphicsElement"
},

PathElement: {"": "GraphicsElement;pathSegList=", "%": "SVGPathElement"},

PathSeg: {"": "Interceptor;", "%": "SVGPathSeg|SVGPathSegArcAbs|SVGPathSegArcRel|SVGPathSegClosePath|SVGPathSegCurvetoCubicAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegLinetoAbs|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoVerticalRel|SVGPathSegMovetoAbs|SVGPathSegMovetoRel"},

PathSegList: {"": "Interceptor_ListMixin_ImmutableListMixin2;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  $asList: function() {
    return [P.PathSeg];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGPathSegList"
},

ScriptElement: {"": "SvgElement;type}", $isScriptElement: true, "%": "SVGScriptElement"},

StyleElement0: {"": "SvgElement;type}", "%": "SVGStyleElement"},

SvgElement: {"": "Element;",
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = new P._AttributeClassSet(receiver);
    return receiver._cssClassSet;
  },
  get$children: function(receiver) {
    var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    H.setRuntimeTypeInfo(t1, [W.Element]);
    return t1;
  },
  set$innerHtml: function(receiver, value) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, value, null, null));
  },
  createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
    var t1, html, fragment, svgFragment, root;
    t1 = [];
    H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
    validator = new W.NodeValidatorBuilder(t1);
    t1 = validator._validators;
    t1.push(W._Html5NodeValidator$(null));
    t1.push(W._TemplatingNodeValidator$());
    t1.push(new W._SvgNodeValidator());
    treeSanitizer = new W._ValidatingTreeSanitizer(validator);
    html = "<svg version=\"1.1\">" + svg + "</svg>";
    fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
    svgFragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    root = t1.get$single(t1);
    for (; t1 = root.firstChild, t1 != null;)
      svgFragment.appendChild(t1);
    return svgFragment;
  },
  insertAdjacentHtml$2: function(receiver, where, text) {
    throw H.wrapException(P.UnsupportedError$("Cannot invoke insertAdjacentHtml on SVG."));
  },
  $isSvgElement: true,
  "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPatternElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
},

SvgSvgElement: {"": "GraphicsElement;currentTranslate=",
  createSvgPoint$0: function(receiver) {
    return receiver.createSVGPoint();
  },
  $isSvgSvgElement: true,
  "%": "SVGSVGElement"
},

Interceptor_ListMixin2: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin2: {"": "Interceptor_ListMixin2+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_AttributeClassSet: {"": "CssClassSetImpl;_svg$_element",
  readClasses$0: function() {
    var classname, s, t1, trimmed;
    classname = new W._ElementAttributeMap(this._svg$_element)._element.getAttribute("class");
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    if (classname == null)
      return s;
    for (t1 = classname.split(" "), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      trimmed = J.trim$0$s(t1._current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    new W._ElementAttributeMap(this._svg$_element)._element.setAttribute("class", s.join$1(s, " "));
  }
}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine0: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish0: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

Point: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isPoint)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.x);
    t2 = J.get$hashCode$(this.y);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
  },
  $add: function(_, other) {
    var t1, t2, t3;
    t1 = this.x;
    t2 = C.JSNumber_methods.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    t2 = C.JSNumber_methods.$add(t1, t2);
    t1 = this.y;
    t3 = C.JSNumber_methods.get$y(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    t3 = C.JSNumber_methods.$add(t1, t3);
    t3 = new P.Point(t2, t3);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t3;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.get$x$x(other);
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t3 = this.y;
    t4 = other.y;
    if (typeof t3 !== "number")
      throw t3.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t4 = new P.Point(t1 - t2, t3 - t4);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t4;
  },
  $isPoint: true
},

_RectangleBase: {"": "Object;",
  toString$0: function(_) {
    return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = this.get$left(this);
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = this.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = this.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(this.get$left(this));
    t2 = J.get$hashCode$(this.top);
    t3 = J.get$hashCode$(this.width);
    t4 = J.get$hashCode$(this.height);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
  },
  get$topLeft: function(_) {
    var t1 = this.get$left(this);
    t1 = new P.Point(t1, this.top);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_RectangleBase", 0)]);
    return t1;
  }
},

Rectangle: {"": "_RectangleBase;left>,top>,width>,height>", $isRectangle: true, $asRectangle: null, $as_RectangleBase: null}}],
["dart.pkg.collection.wrappers", "package:collection/wrappers.dart", , Q, {
UnmodifiableMapMixin__throw: function() {
  throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable Map"));
},

UnmodifiableMapView: {"": "DelegatingMap_UnmodifiableMapMixin;_base", $asMap: null},

DelegatingMap_UnmodifiableMapMixin: {"": "DelegatingMap+UnmodifiableMapMixin;", $asMap: null, $isMap: true},

UnmodifiableMapMixin: {"": "Object;",
  $indexSet: function(_, key, value) {
    return Q.UnmodifiableMapMixin__throw();
  },
  addAll$1: function(_, other) {
    return Q.UnmodifiableMapMixin__throw();
  },
  clear$0: function(_) {
    return Q.UnmodifiableMapMixin__throw();
  },
  $isMap: true
},

DelegatingMap: {"": "Object;",
  $index: function(_, key) {
    var t1 = this._base;
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this._base;
    t1.$indexSet(t1, key, value);
  },
  forEach$1: function(_, f) {
    var t1 = this._base;
    t1.forEach$1(t1, f);
  },
  get$isNotEmpty: function(_) {
    return this._base._collection$_length !== 0;
  },
  get$keys: function() {
    var t1, t2;
    t1 = this._base;
    t2 = new P.LinkedHashMapKeyIterable(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_LinkedHashMap", 0)]);
    return t2;
  },
  get$length: function(_) {
    return this._base._collection$_length;
  },
  get$values: function(_) {
    var t1 = this._base;
    return t1.get$values(t1);
  },
  $isMap: true
}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(new P.ArgumentError("Invalid list index " + H.S(index)));
  },
  $isTypedData: true,
  "%": ";ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
},

TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null}}],
["html_common", "dart:html_common", , P, {
convertNativeToDart_DateTime: function(date) {
  return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
},

_convertDartToNative_PrepareForStructuredClone: function(value) {
  var copies, copy;
  copies = [];
  copy = new P._convertDartToNative_PrepareForStructuredClone_walk(new P._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new P._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new P._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
  new P._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
  return copy;
},

convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
  var copies = [];
  return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
},

Device_isOpera: function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
  return $.Device__isOpera;
},

Device_isWebKit: function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
  return $.Device__isWebKit;
},

_convertDartToNative_PrepareForStructuredClone_findSlot: {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  },
  $is_args1: true
},

_convertDartToNative_PrepareForStructuredClone_readSlot: {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $is_args1: true
},

_convertDartToNative_PrepareForStructuredClone_writeSlot: {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    t1[i] = x;
  },
  $is_args2: true
},

_convertDartToNative_PrepareForStructuredClone_cleanupSlots: {"": "Closure;",
  call$0: function() {
  }
},

_convertDartToNative_PrepareForStructuredClone_walk: {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, t2, slot, t3, $length, copy, i;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    t2 = J.getInterceptor(e);
    if (typeof e === "object" && e !== null && !!t2.$isDateTime)
      return new Date(e.millisecondsSinceEpoch);
    if (typeof e === "object" && e !== null && !!t2.$isTypedData)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isMap) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t3 = t1.copy_0;
      if (t3 != null)
        return t3;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      t2.forEach$1(e, new P._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || !!t2.$isList)) {
      $length = t2.get$length(e);
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      copy = new Array($length);
      this.writeSlot_7.call$2(slot, copy);
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        t1 = this.call$1(t2.$index(e, i));
        if (i >= copy.length)
          throw H.ioore(copy, i);
        copy[i] = t1;
      }
      return copy;
    }
    throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
  },
  $is_args1: true
},

_convertDartToNative_PrepareForStructuredClone_walk_closure: {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  $is_args2: true
},

convertNativeToDart_AcceptStructuredClone_findSlot: {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_readSlot: {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_writeSlot: {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    t1[i] = x;
  },
  $is_args2: true
},

convertNativeToDart_AcceptStructuredClone_walk: {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, key, $length, t2, i;
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (e instanceof Date)
      return P.convertNativeToDart_DateTime(e);
    if (e instanceof RegExp)
      throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = Object.keys(e), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1._current;
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(e);
      $length = t1.get$length(e);
      copy = this.mustCopy_4 ? new Array($length) : e;
      this.writeSlot_7.call$2(slot, copy);
      if (typeof $length !== "number")
        throw H.iae($length);
      t2 = J.getInterceptor$ax(copy);
      i = 0;
      for (; i < $length; ++i)
        t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
      return copy;
    }
    return e;
  },
  $is_args1: true
},

CssClassSetImpl: {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    t1 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
    t1._cell = t1._set._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  get$isEmpty: function(_) {
    return this.readClasses$0()._collection$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this.readClasses$0()._collection$_length !== 0;
  },
  get$length: function(_) {
    return this.readClasses$0()._collection$_length;
  },
  lookup$1: function(value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value) ? value : null;
  },
  add$1: function(_, value) {
    return this.modify$1(new P.CssClassSetImpl_add_closure(value));
  },
  remove$1: function(_, value) {
    var s, result;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  elementAt$1: function(_, index) {
    var t1 = this.readClasses$0();
    return t1.elementAt$1(t1, index);
  },
  modify$1: function(f) {
    var s, ret;
    s = this.readClasses$0();
    ret = f.call$1(s);
    this.writeClasses$1(s);
    return ret;
  },
  $isEfficientLength: true
},

CssClassSetImpl_add_closure: {"": "Closure;value_0",
  call$1: function(s) {
    return J.add$1$ax(s, this.value_0);
  },
  $is_args1: true
},

FilteredElementList: {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
  },
  forEach$1: function(_, f) {
    H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    J.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw H.wrapException(new P.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  removeRange$2: function(_, start, end) {
    H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  insert$2: function(_, index, value) {
    var t1 = this._childNodes;
    t1.insert$2(t1, index, value);
  },
  remove$1: function(_, element) {
    var t1, i, indexElement;
    t1 = J.getInterceptor(element);
    if (typeof element !== "object" || element === null || !t1.$isElement)
      return false;
    for (i = 0; i < this.get$_filtered().length; ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw H.ioore(t1, i);
      indexElement = t1[i];
      if (indexElement == null ? element == null : indexElement === element) {
        J.remove$0$ax(indexElement);
        return true;
      }
    }
    return false;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  get$iterator: function(_) {
    var t1 = this.get$_filtered();
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  $asListBase: null,
  $asList: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor(n);
    return typeof n === "object" && n !== null && !!t1.$isElement;
  },
  $is_args1: true
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return J.remove$0$ax(el);
  },
  $is_args1: true
}}],
["logging", "package:logging/logging.dart", , N, {
Logger: {"": "Object;name>,parent,_level,_children>,children>,_controller",
  get$fullName: function() {
    var t1, t2, t3;
    t1 = this.parent;
    t2 = t1 == null || J.get$name$x(t1) === "";
    t3 = this.name;
    return t2 ? t3 : t1.get$fullName() + "." + t3;
  },
  get$level: function() {
    if ($.hierarchicalLoggingEnabled) {
      var t1 = this._level;
      if (t1 != null)
        return t1;
      t1 = this.parent;
      if (t1 != null)
        return t1.get$level();
    }
    return $._rootLevel;
  },
  set$level: function(value) {
    if ($.hierarchicalLoggingEnabled && this.parent != null)
      this._level = value;
    else {
      if (this.parent != null)
        throw H.wrapException(P.UnsupportedError$("Please set \"hierarchicalLoggingEnabled\" to true if you want to change the level on a non-root logger."));
      $._rootLevel = value;
    }
  },
  get$onRecord: function() {
    return this._getStream$0();
  },
  log$4: function(logLevel, message, error, stackTrace) {
    var t1, t2, t3, record, target;
    if (logLevel.value >= this.get$level().value) {
      t1 = this.get$fullName();
      t2 = P.DateTime$_now();
      t3 = $.LogRecord__nextNumber;
      $.LogRecord__nextNumber = t3 + 1;
      record = new N.LogRecord(logLevel, message, t1, t2, t3, error, stackTrace);
      if ($.hierarchicalLoggingEnabled)
        for (target = this; target != null;) {
          target._publish$1(record);
          target = target.parent;
        }
      else
        N.Logger_Logger("")._publish$1(record);
    }
  },
  warning$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_WARNING_900, message, error, stackTrace);
  },
  warning$1: function(message) {
    return this.warning$3(message, null, null);
  },
  _getStream$0: function() {
    var t1, t2;
    if ($.hierarchicalLoggingEnabled || this.parent == null) {
      if (this._controller == null)
        this._controller = P.StreamController_StreamController$broadcast(null, null, true, N.LogRecord);
      t1 = this._controller;
      t1.toString;
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
      return t2;
    } else
      return N.Logger_Logger("")._getStream$0();
  },
  _publish$1: function(record) {
    var t1 = this._controller;
    if (t1 != null) {
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1(record);
    }
  },
  Logger$_internal$3: function($name, $parent, children) {
    var t1 = this.parent;
    if (t1 != null) {
      t1 = J.get$_children$x(t1);
      t1.$indexSet(t1, this.name, this);
    }
  },
  static: {
"": "Logger__loggers",
Logger_Logger: function($name) {
  return $.get$Logger__loggers().putIfAbsent$2($name, new N.Logger_Logger_closure($name));
},

Logger_Logger$_named: function($name) {
  var dot, $parent, thisName;
  if (C.JSString_methods.startsWith$1($name, "."))
    throw H.wrapException(new P.ArgumentError("name shouldn't start with a '.'"));
  dot = C.JSString_methods.lastIndexOf$1($name, ".");
  if (dot === -1) {
    $parent = $name !== "" ? N.Logger_Logger("") : null;
    thisName = $name;
  } else {
    $parent = N.Logger_Logger(C.JSString_methods.substring$2($name, 0, dot));
    thisName = C.JSString_methods.substring$1($name, dot + 1);
  }
  return N.Logger$_internal(thisName, $parent, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, N.Logger));
},

Logger$_internal: function($name, $parent, children) {
  var t1 = new Q.UnmodifiableMapView(children);
  H.setRuntimeTypeInfo(t1, [null, null]);
  t1 = new N.Logger($name, $parent, null, children, t1, null);
  t1.Logger$_internal$3($name, $parent, children);
  return t1;
}}

},

Logger_Logger_closure: {"": "Closure;name_0",
  call$0: function() {
    return N.Logger_Logger$_named(this.name_0);
  }
},

Level: {"": "Object;name>,value>",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isLevel && this.value === other.value;
  },
  $lt: function(_, other) {
    return C.JSInt_methods.$lt(this.value, C.JSInt_methods.get$value(other));
  },
  $gt: function(_, other) {
    return C.JSInt_methods.$gt(this.value, C.JSInt_methods.get$value(other));
  },
  $ge: function(_, other) {
    return this.value >= J.get$value$x(other);
  },
  get$hashCode: function(_) {
    return this.value;
  },
  toString$0: function(_) {
    return this.name;
  },
  $isLevel: true,
  static: {
"": "Level_ALL,Level_OFF,Level_FINEST,Level_FINER,Level_FINE,Level_CONFIG,Level_INFO,Level_WARNING,Level_SEVERE,Level_SHOUT,Level_LEVELS",
}

},

LogRecord: {"": "Object;level<,message,loggerName,time<,sequenceNumber,error>,stackTrace<",
  toString$0: function(_) {
    return "[" + this.level.name + "] " + this.loggerName + ": " + this.message;
  },
  static: {
"": "LogRecord__nextNumber",
}

}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.Primitives__throwFormatException$closure = H.Primitives__throwFormatException$closure = new H.Closure$1(H.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.main$closure = D.main$closure = new H.Closure$0(D.main, "main$closure");
init.globalFunctions.translationExample$closure = D.translationExample$closure = new H.Closure$1(D.translationExample, "translationExample$closure");
init.globalFunctions._tabbableTextAreaKeyPressed$closure = D._tabbableTextAreaKeyPressed$closure = new H.Closure$1(D._tabbableTextAreaKeyPressed, "_tabbableTextAreaKeyPressed$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new H.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$20(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new H.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new H.Closure$1(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions._Html5NodeValidator__standardAttributeValidator$closure = W._Html5NodeValidator__standardAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__standardAttributeValidator, "_Html5NodeValidator__standardAttributeValidator$closure");
init.globalFunctions._Html5NodeValidator__uriAttributeValidator$closure = W._Html5NodeValidator__uriAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__uriAttributeValidator, "_Html5NodeValidator__uriAttributeValidator$closure");
// Runtime type support
J.JSInt.$isint = true;
J.JSInt.$isObject = true;
W.Node.$isNode = true;
W.Node.$isObject = true;
P.PathSeg.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isObject = true;
N.Level.$isLevel = true;
N.Level.$isObject = true;
J.JSNumber.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isObject = true;
N.LogRecord.$isLogRecord = true;
N.LogRecord.$isObject = true;
N.Logger.$isObject = true;
D.Operator.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
D.OutputSegmentUI.$isObject = true;
D.ElementUI.$isObject = true;
W.KeyboardEvent.$isKeyboardEvent = true;
W.KeyboardEvent.$isObject = true;
W.NodeValidator.$isNodeValidator = true;
W.NodeValidator.$isObject = true;
W.DivElement.$isElement = true;
W.DivElement.$isNode = true;
W.DivElement.$isObject = true;
W.Event.$isObject = true;
P.ReceivePort.$isStream = true;
P.ReceivePort.$asStream = [null];
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
J.JSArray.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
P._BroadcastSubscription.$is_BroadcastSubscription = true;
P._BroadcastSubscription.$is_BufferingStreamSubscription = true;
P._BroadcastSubscription.$is_EventSink = true;
P._BroadcastSubscription.$isStreamSubscription = true;
P._BroadcastSubscription.$isObject = true;
W.SelectElement.$isSelectElement = true;
W.SelectElement.$isElement = true;
W.SelectElement.$isNode = true;
W.SelectElement.$isObject = true;
P.Object.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isNodeValidator = true;
W._Html5NodeValidator.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
W.CustomEvent.$isCustomEvent = true;
W.CustomEvent.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C__DelayedDone = new P._DelayedDone();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_click = new W.EventStreamProvider("click");
C.EventStreamProvider_dblclick = new W.EventStreamProvider("dblclick");
C.EventStreamProvider_drag = new W.EventStreamProvider("drag");
C.EventStreamProvider_dragend = new W.EventStreamProvider("dragend");
C.EventStreamProvider_dragover = new W.EventStreamProvider("dragover");
C.EventStreamProvider_dragstart = new W.EventStreamProvider("dragstart");
C.EventStreamProvider_drop = new W.EventStreamProvider("drop");
C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown");
C.EventStreamProvider_keypress = new W.EventStreamProvider("keypress");
C.EventStreamProvider_mousedown = new W.EventStreamProvider("mousedown");
C.EventStreamProvider_mouseenter = new W.EventStreamProvider("mouseenter");
C.EventStreamProvider_mousemove = new W.EventStreamProvider("mousemove");
C.EventStreamProvider_mouseup = new W.EventStreamProvider("mouseup");
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_6qb = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_86y = function getTagFallback(o) {
  if (o == null) return "Null";
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.builtin$cls;
    if (typeof name == "string") return name;
    name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Cbr = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Chrome") >= 0 ||
        userAgent.indexOf("DumpRenderTree") >= 0) {
      return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JS_CONST_rD3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    if (tag == "Document") return null;
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.Level_ALL_0 = new N.Level("ALL", 0);
C.Level_INFO_800 = new N.Level("INFO", 800);
C.Level_WARNING_900 = new N.Level("WARNING", 900);
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.List_empty = Isolate.makeConstantList([]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.NodeList_methods = W.NodeList.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.BaseDetailsUI_count = 1;
$.SourceHumanDetailsUI_count = 1;
$.SelectionDetailsUI_count = 1;
$.SortDetailsUI_count = 1;
$.SplitDetailsUI_count = 1;
$.app = null;
$.canvas = null;
$.operators = null;
$.currentOperatorId = null;
$.selectedOperator = null;
$.selectedPort = null;
$.tempLine = null;
$._dragSource = null;
$.opNumber = 1;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.hierarchicalLoggingEnabled = false;
$._rootLevel = C.Level_INFO_800;
$.LogRecord__nextNumber = 0;
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J._initCustomEvent$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver)._initCustomEvent$4(receiver, a0, a1, a2, a3);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.createSvgPoint$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createSvgPoint$0(receiver);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$_children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_children(receiver);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$currentTranslate$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$currentTranslate(receiver);
};
J.get$detail$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$detail(receiver);
};
J.get$display$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$display(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$keyCode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$keyCode(receiver);
};
J.get$lastChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lastChild(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$on$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$on(receiver);
};
J.get$options$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$options(receiver);
};
J.get$pathSegList$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$pathSegList(receiver);
};
J.get$selectedIndex$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$selectedIndex(receiver);
};
J.get$target$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$target(receiver);
};
J.get$text$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$text(receiver);
};
J.get$topLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$topLeft(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.getBoundingClientRect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
J.getCtm$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getCtm$0(receiver);
};
J.getScreenCtm$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getScreenCtm$0(receiver);
};
J.initialize$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).initialize$0(receiver);
};
J.insertAdjacentHtml$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).insertAdjacentHtml$2(receiver, a0, a1);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.querySelector$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).querySelector$1(receiver, a0);
};
J.querySelectorAll$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).querySelectorAll$1(receiver, a0);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$_dartDetail$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_dartDetail(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$cursor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$cursor(receiver, value);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$htmlFor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$htmlFor(receiver, value);
};
J.set$innerHtml$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
J.set$placeholder$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$placeholder(receiver, value);
};
J.set$text$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$text(receiver, value);
};
J.set$type$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$type(receiver, value);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toUpperCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "SOURCE_OPTIONS_VALUES", "SOURCE_OPTIONS_VALUES", "get$SOURCE_OPTIONS_VALUES", function() {
  return ["", " ", "\t", ",", ":"];
});
Isolate.$lazy($, "SOURCE_OPTIONS_NAMES", "SOURCE_OPTIONS_NAMES", "get$SOURCE_OPTIONS_NAMES", function() {
  return ["None", "White space", "Tab", "Comma", "Column"];
});
Isolate.$lazy($, "SOURCE_OPTIONS_HUMAN_INPUTS", "SOURCE_OPTIONS_HUMAN_INPUTS", "get$SOURCE_OPTIONS_HUMAN_INPUTS", function() {
  return H.fillLiteralMap(["text input", "text", "number input", "number", "single choice", "single", "multiple choice", "multiple"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "modal", "modal", "get$modal", function() {
  return document.querySelector("#operator_modal");
});
Isolate.$lazy($, "modalDialog", "modalDialog", "get$modalDialog", function() {
  return $.get$modal().querySelector(".modal-dialog");
});
Isolate.$lazy($, "modalAlert", "modalAlert", "get$modalAlert", function() {
  return $.get$modalDialog().querySelector(".modal-content .modal-header .alert");
});
Isolate.$lazy($, "modalBody", "modalBody", "get$modalBody", function() {
  return $.get$modalDialog().querySelector(".modal-content .modal-body");
});
Isolate.$lazy($, "closeButton", "closeButton", "get$closeButton", function() {
  return $.get$modalDialog().querySelector(".modal-footer #close_operator_modal");
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "webkitEvents", "ElementEvents_webkitEvents", "get$ElementEvents_webkitEvents", function() {
  return H.fillLiteralMap(["animationend", "webkitAnimationEnd", "animationiteration", "webkitAnimationIteration", "animationstart", "webkitAnimationStart", "fullscreenchange", "webkitfullscreenchange", "fullscreenerror", "webkitfullscreenerror", "keyadded", "webkitkeyadded", "keyerror", "webkitkeyerror", "keymessage", "webkitkeymessage", "needkey", "webkitneedkey", "pointerlockchange", "webkitpointerlockchange", "pointerlockerror", "webkitpointerlockerror", "resourcetimingbufferfull", "webkitresourcetimingbufferfull", "transitionend", "webkitTransitionEnd", "speechchange", "webkitSpeechChange"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_loggers", "Logger__loggers", "get$Logger__loggers", function() {
  var t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  H.setRuntimeTypeInfo(t1, [J.JSString, N.Logger]);
  return t1;
});
// Native classes

init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(D.main$closure); });
  } else {
    H.startRootIsolate(D.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=app.dart.js.map
//@ sourceMappingURL=app.dart.js.map
